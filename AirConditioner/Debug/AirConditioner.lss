
AirConditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  000015ea  0000167e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080010c  0080010c  0000172a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bbb  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116a  00000000  00000000  000055e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bc  00000000  00000000  0000674d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  0000810c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001317  00000000  00000000  00008648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c52  00000000  00000000  0000995f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000b5b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	e7 06       	cpc	r14, r23
      56:	ec 06       	cpc	r14, r28
      58:	f2 06       	cpc	r15, r18
      5a:	f7 06       	cpc	r15, r23
      5c:	fc 06       	cpc	r15, r28
      5e:	02 07       	cpc	r16, r18
      60:	07 07       	cpc	r16, r23
      62:	3a 07       	cpc	r19, r26
      64:	3f 07       	cpc	r19, r31
      66:	45 07       	cpc	r20, r21
      68:	4c 07       	cpc	r20, r28
      6a:	52 07       	cpc	r21, r18
      6c:	59 07       	cpc	r21, r25
      6e:	61 07       	cpc	r22, r17
      70:	68 07       	cpc	r22, r24

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	ea ee       	ldi	r30, 0xEA	; 234
      86:	f5 e1       	ldi	r31, 0x15	; 21
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	ac 30       	cpi	r26, 0x0C	; 12
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	21 e0       	ldi	r18, 0x01	; 1
      96:	ac e0       	ldi	r26, 0x0C	; 12
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	ab 31       	cpi	r26, 0x1B	; 27
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 b9 06 	call	0xd72	; 0xd72 <main>
      a8:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <lcdFlag>:
}


void lcdFlag(void)
{
	lcdDelay = 0;	
      b0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
      b4:	08 95       	ret

000000b6 <APP_adjustInit>:
	APP_adjustInit();
}

static void APP_adjustInit(void)
{
	HLCD_ClrDisplay();
      b6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
	HLCD_WriteInt(MIN_TEMP);
      ba:	62 e1       	ldi	r22, 0x12	; 18
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
	HLCD_gotoXY(0, 14);
      c6:	6e e0       	ldi	r22, 0x0E	; 14
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
	HLCD_WriteInt(MAX_TEMP);
      ce:	63 e2       	ldi	r22, 0x23	; 35
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
	HLCD_gotoXY(0, 7);
      da:	67 e0       	ldi	r22, 0x07	; 7
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
	HLCD_WriteInt(u8_g_tempValue);
      e2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
	HLCD_gotoXY(1, 0);
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
	HLCD_WriteString("||||||||||||||||");
      f8:	8c e8       	ldi	r24, 0x8C	; 140
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
	u8_g_CursorPosition = u8_g_tempValue - MIN_TEMP;
     100:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     104:	62 51       	subi	r22, 0x12	; 18
     106:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <u8_g_CursorPosition>
	HLCD_gotoXY(1, u8_g_CursorPosition);
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
     110:	08 95       	ret

00000112 <APP_Init>:
* 											Function Implementation
************************************************************************************************************/
void APP_Init(void)
{
	/* Initialize used modules */
	HLCD_vidInit();
     112:	0e 94 22 05 	call	0xa44	; 0xa44 <HLCD_vidInit>
	KEYPAD_init();
     116:	0e 94 68 03 	call	0x6d0	; 0x6d0 <KEYPAD_init>
	TSENSOR_Init(&st_g_TempSensor);
     11a:	86 e1       	ldi	r24, 0x16	; 22
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	0e 94 56 06 	call	0xcac	; 0xcac <TSENSOR_Init>
	BUZ_Init(&st_g_Buzzer);
     122:	81 e6       	ldi	r24, 0x61	; 97
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 04 02 	call	0x408	; 0x408 <BUZ_Init>
	
	HLCD_vidCreatCustomChar(arr_g_bell, 1);
     12a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <arr_g_bell>
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 33 06 	call	0xc66	; 0xc66 <HLCD_vidCreatCustomChar>
	
	/* Display welcome message for one second */
	HLCD_gotoXY(0, 4);
     136:	64 e0       	ldi	r22, 0x04	; 4
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
	HLCD_WriteString("Welcome!");
     13e:	8d e9       	ldi	r24, 0x9D	; 157
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
	TIM0_SyncDelay(1, Seconds);
     146:	42 e0       	ldi	r20, 0x02	; 2
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 1c 02 	call	0x438	; 0x438 <TIM0_SyncDelay>
	HLCD_ClrDisplay();
     154:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
	
	/* Display Default Temperature */
	HLCD_WriteString(" Default temp:");
     158:	86 ea       	ldi	r24, 0xA6	; 166
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
	HLCD_gotoXY(1, 7);
     160:	67 e0       	ldi	r22, 0x07	; 7
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
	HLCD_WriteInt(DEFAULT_TEMP);
     168:	64 e1       	ldi	r22, 0x14	; 20
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
	TIM0_SyncDelay(1, Seconds);
     174:	42 e0       	ldi	r20, 0x02	; 2
     176:	61 e0       	ldi	r22, 0x01	; 1
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 1c 02 	call	0x438	; 0x438 <TIM0_SyncDelay>
	HLCD_ClrDisplay();
     182:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
	
	/* Get the required temperature */
	HLCD_WriteString("Pick temperature");
     186:	85 eb       	ldi	r24, 0xB5	; 181
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
	TIM0_SyncDelay(500, mSeconds);
     18e:	41 e0       	ldi	r20, 0x01	; 1
     190:	64 ef       	ldi	r22, 0xF4	; 244
     192:	71 e0       	ldi	r23, 0x01	; 1
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 1c 02 	call	0x438	; 0x438 <TIM0_SyncDelay>

	APP_adjustInit();
     19c:	0e 94 5b 00 	call	0xb6	; 0xb6 <APP_adjustInit>
     1a0:	08 95       	ret

000001a2 <APP_Start>:

void APP_Start(void)
{
	Uchar8_t u8_l_PressedKey;

	u8_l_PressedKey = GetButton();
     1a2:	0e 94 b3 04 	call	0x966	; 0x966 <GetButton>

	switch(u8_l_PressedKey)
     1a6:	99 27       	eor	r25, r25
     1a8:	82 30       	cpi	r24, 0x02	; 2
     1aa:	91 05       	cpc	r25, r1
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <APP_Start+0xe>
     1ae:	7f c0       	rjmp	.+254    	; 0x2ae <APP_Start+0x10c>
     1b0:	34 f4       	brge	.+12     	; 0x1be <APP_Start+0x1c>
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	61 f0       	breq	.+24     	; 0x1ce <APP_Start+0x2c>
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	09 f4       	brne	.+2      	; 0x1bc <APP_Start+0x1a>
     1ba:	41 c0       	rjmp	.+130    	; 0x23e <APP_Start+0x9c>
     1bc:	ad c0       	rjmp	.+346    	; 0x318 <APP_Start+0x176>
     1be:	83 30       	cpi	r24, 0x03	; 3
     1c0:	91 05       	cpc	r25, r1
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <APP_Start+0x24>
     1c4:	99 c0       	rjmp	.+306    	; 0x2f8 <APP_Start+0x156>
     1c6:	04 97       	sbiw	r24, 0x04	; 4
     1c8:	09 f4       	brne	.+2      	; 0x1cc <APP_Start+0x2a>
     1ca:	a3 c0       	rjmp	.+326    	; 0x312 <APP_Start+0x170>
     1cc:	a5 c0       	rjmp	.+330    	; 0x318 <APP_Start+0x176>
	{
		case KEY_INCREAMENT:
		{
			if(!u8_g_setFlag)
     1ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u8_g_setFlag>
     1d2:	81 11       	cpse	r24, r1
     1d4:	1c c0       	rjmp	.+56     	; 0x20e <APP_Start+0x6c>
			{
				if(u8_g_CursorPosition == 15) break;
     1d6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_g_CursorPosition>
     1da:	8f 30       	cpi	r24, 0x0F	; 15
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <APP_Start+0x3e>
     1de:	9c c0       	rjmp	.+312    	; 0x318 <APP_Start+0x176>
				
				HLCD_gotoXY(0, 7);
     1e0:	67 e0       	ldi	r22, 0x07	; 7
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
				HLCD_WriteInt(++ u8_g_tempValue);
     1e8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ec:	6f 5f       	subi	r22, 0xFF	; 255
     1ee:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
				HLCD_gotoXY(1, ++ u8_g_CursorPosition);
     1fc:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <u8_g_CursorPosition>
     200:	6f 5f       	subi	r22, 0xFF	; 255
     202:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <u8_g_CursorPosition>
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
     20c:	85 c0       	rjmp	.+266    	; 0x318 <APP_Start+0x176>
			}
			else
			{
				HLCD_ClrDisplay();
     20e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
				HLCD_WriteString("This Operation");
     212:	86 ec       	ldi	r24, 0xC6	; 198
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
				HLCD_gotoXY(1, 0);
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
				HLCD_WriteString("is not allowed!");
     222:	85 ed       	ldi	r24, 0xD5	; 213
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
				TIM0_SyncDelay(500, mSeconds);
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	64 ef       	ldi	r22, 0xF4	; 244
     22e:	71 e0       	ldi	r23, 0x01	; 1
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 1c 02 	call	0x438	; 0x438 <TIM0_SyncDelay>

				HLCD_ClrDisplay();
     238:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
     23c:	6d c0       	rjmp	.+218    	; 0x318 <APP_Start+0x176>
			}
			break;
		}
		case KEY_DECREAMENT:
		{
			if(!u8_g_setFlag)
     23e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u8_g_setFlag>
     242:	81 11       	cpse	r24, r1
     244:	1c c0       	rjmp	.+56     	; 0x27e <APP_Start+0xdc>
			{
				if(u8_g_CursorPosition == 0) break;
     246:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_g_CursorPosition>
     24a:	88 23       	and	r24, r24
     24c:	09 f4       	brne	.+2      	; 0x250 <APP_Start+0xae>
     24e:	64 c0       	rjmp	.+200    	; 0x318 <APP_Start+0x176>
				
				HLCD_gotoXY(0, 7);
     250:	67 e0       	ldi	r22, 0x07	; 7
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
				HLCD_WriteInt(-- u8_g_tempValue);
     258:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     25c:	61 50       	subi	r22, 0x01	; 1
     25e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
				HLCD_gotoXY(1, -- u8_g_CursorPosition);
     26c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <u8_g_CursorPosition>
     270:	61 50       	subi	r22, 0x01	; 1
     272:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <u8_g_CursorPosition>
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
     27c:	4d c0       	rjmp	.+154    	; 0x318 <APP_Start+0x176>
			}
			else
			{
				HLCD_ClrDisplay();
     27e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
				HLCD_WriteString("This Operation");
     282:	86 ec       	ldi	r24, 0xC6	; 198
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
				HLCD_gotoXY(1, 0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
				HLCD_WriteString("is not allowed!");
     292:	85 ed       	ldi	r24, 0xD5	; 213
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
				TIM0_SyncDelay(500, mSeconds);
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	64 ef       	ldi	r22, 0xF4	; 244
     29e:	71 e0       	ldi	r23, 0x01	; 1
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 1c 02 	call	0x438	; 0x438 <TIM0_SyncDelay>

				HLCD_ClrDisplay();
     2a8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
     2ac:	35 c0       	rjmp	.+106    	; 0x318 <APP_Start+0x176>
			}
			break;
		}
		case KEY_SET:
		{
			if(!u8_g_setFlag)
     2ae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u8_g_setFlag>
     2b2:	81 11       	cpse	r24, r1
     2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <APP_Start+0x126>
			{
				u8_g_setFlag = 1;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <u8_g_setFlag>
				HLCD_vidWritecmd(HLCD_DISPLAY_ON_CURSOR_OFF);
     2bc:	8c e0       	ldi	r24, 0x0C	; 12
     2be:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
				HLCD_ClrDisplay();
     2c2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
     2c6:	28 c0       	rjmp	.+80     	; 0x318 <APP_Start+0x176>
			}
			else
			{
				HLCD_ClrDisplay();
     2c8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
				HLCD_WriteString("This Operation");
     2cc:	86 ec       	ldi	r24, 0xC6	; 198
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
				HLCD_gotoXY(1, 0);
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
				HLCD_WriteString("is not allowed!");
     2dc:	85 ed       	ldi	r24, 0xD5	; 213
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
				TIM0_SyncDelay(500, mSeconds);
     2e4:	41 e0       	ldi	r20, 0x01	; 1
     2e6:	64 ef       	ldi	r22, 0xF4	; 244
     2e8:	71 e0       	ldi	r23, 0x01	; 1
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 1c 02 	call	0x438	; 0x438 <TIM0_SyncDelay>

				HLCD_ClrDisplay();
     2f2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <HLCD_ClrDisplay>
     2f6:	10 c0       	rjmp	.+32     	; 0x318 <APP_Start+0x176>
			}
			break;
		}
		case KEY_ADJUST:
		{
			u8_g_setFlag = 0;
     2f8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <u8_g_setFlag>
			BUZ_SetState(&st_g_Buzzer, BUZ_OFF);
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	81 e6       	ldi	r24, 0x61	; 97
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 12 02 	call	0x424	; 0x424 <BUZ_SetState>
			HLCD_vidWritecmd(HLCD_DISPLAY_ON_CURSOR_ON_NO_BLINK);
     306:	8e e0       	ldi	r24, 0x0E	; 14
     308:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
			APP_adjustInit();
     30c:	0e 94 5b 00 	call	0xb6	; 0xb6 <APP_adjustInit>
			break;
     310:	03 c0       	rjmp	.+6      	; 0x318 <APP_Start+0x176>
		}
		case KEY_RESET:
		{
			u8_g_tempValue = DEFAULT_TEMP;
     312:	84 e1       	ldi	r24, 0x14	; 20
     314:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
		}
	}
	
	TSENSOR_ReadValue(&st_g_TempSensor, &f32_l_CurrentTemp);
     318:	6d e0       	ldi	r22, 0x0D	; 13
     31a:	71 e0       	ldi	r23, 0x01	; 1
     31c:	86 e1       	ldi	r24, 0x16	; 22
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <TSENSOR_ReadValue>
	
	if(lcdDelay == 0)
     324:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     328:	81 11       	cpse	r24, r1
     32a:	6d c0       	rjmp	.+218    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	{
		lcdDelay = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
		if(f32_l_CurrentTemp > u8_g_tempValue && u8_g_setFlag)
     332:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__floatsisf>
     340:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <f32_l_CurrentTemp>
     344:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <f32_l_CurrentTemp+0x1>
     348:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <f32_l_CurrentTemp+0x2>
     34c:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <f32_l_CurrentTemp+0x3>
     350:	0e 94 c9 08 	call	0x1192	; 0x1192 <__cmpsf2>
     354:	88 23       	and	r24, r24
     356:	8c f5       	brge	.+98     	; 0x3ba <APP_Start+0x218>
     358:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u8_g_setFlag>
     35c:	88 23       	and	r24, r24
     35e:	69 f1       	breq	.+90     	; 0x3ba <APP_Start+0x218>
		{
			HLCD_gotoXY(0,0);
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
			HLCD_vidWriteChar(1);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	0e 94 71 05 	call	0xae2	; 0xae2 <HLCD_vidWriteChar>
			HLCD_WriteString("Current temp ");
     36e:	85 ee       	ldi	r24, 0xE5	; 229
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
			HLCD_WriteInt(f32_l_CurrentTemp);
     376:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <f32_l_CurrentTemp>
     37a:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <f32_l_CurrentTemp+0x1>
     37e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <f32_l_CurrentTemp+0x2>
     382:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <f32_l_CurrentTemp+0x3>
     386:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixunssfsi>
     38a:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
			BUZ_SetState(&st_g_Buzzer, BUZ_ON);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	81 e6       	ldi	r24, 0x61	; 97
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 12 02 	call	0x424	; 0x424 <BUZ_SetState>
		
			HLCD_gotoXY(0,14);
     398:	6e e0       	ldi	r22, 0x0E	; 14
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
			HLCD_WriteInt(f32_l_CurrentTemp);
     3a0:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <f32_l_CurrentTemp>
     3a4:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <f32_l_CurrentTemp+0x1>
     3a8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <f32_l_CurrentTemp+0x2>
     3ac:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <f32_l_CurrentTemp+0x3>
     3b0:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixunssfsi>
     3b4:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
     3b8:	1d c0       	rjmp	.+58     	; 0x3f4 <APP_Start+0x252>
		}
		else if(u8_g_setFlag)
     3ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u8_g_setFlag>
     3be:	88 23       	and	r24, r24
     3c0:	c9 f0       	breq	.+50     	; 0x3f4 <APP_Start+0x252>
		{
			BUZ_SetState(&st_g_Buzzer, BUZ_OFF);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	81 e6       	ldi	r24, 0x61	; 97
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 12 02 	call	0x424	; 0x424 <BUZ_SetState>
			HLCD_gotoXY(0,0);
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <HLCD_gotoXY>
			HLCD_WriteString("Current temp: ");
     3d4:	83 ef       	ldi	r24, 0xF3	; 243
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
			HLCD_WriteInt(f32_l_CurrentTemp);
     3dc:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <f32_l_CurrentTemp>
     3e0:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <f32_l_CurrentTemp+0x1>
     3e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <f32_l_CurrentTemp+0x2>
     3e8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <f32_l_CurrentTemp+0x3>
     3ec:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixunssfsi>
     3f0:	0e 94 14 06 	call	0xc28	; 0xc28 <HLCD_WriteInt>
		}
	
		TIM0_AsyncDelay(500, mSeconds,lcdFlag);
     3f4:	28 e5       	ldi	r18, 0x58	; 88
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	64 ef       	ldi	r22, 0xF4	; 244
     3fc:	71 e0       	ldi	r23, 0x01	; 1
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 c2 02 	call	0x584	; 0x584 <TIM0_AsyncDelay>
     406:	08 95       	ret

00000408 <BUZ_Init>:

/*************************************************************************************************************
 * 											Function Implementation
 ************************************************************************************************************/
void BUZ_Init(st_Buzzer_t* pst_a_buzzer)
{
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	ec 01       	movw	r28, r24
	DIO_s8SETPinDir(pst_a_buzzer->BuzzerPin, OUTPUT);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	88 81       	ld	r24, Y
     412:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
	DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, LOW);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	88 81       	ld	r24, Y
     41a:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <BUZ_SetState>:

en_BuzzerErrorState_t BUZ_Enable(st_Buzzer_t* pst_a_buzzer);
en_BuzzerErrorState_t BUZ_SetState(st_Buzzer_t* pst_a_buzzer, en_BuzzerState_t u16_a_state)
{
	if(pst_a_buzzer != NULL)
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	31 f0       	breq	.+12     	; 0x434 <BUZ_SetState+0x10>
     428:	fc 01       	movw	r30, r24
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
     42a:	80 81       	ld	r24, Z
     42c:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	else
	{
		return BUZ_NOK;
	}
	
	return BUZ_OK;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
	}
	else
	{
		return BUZ_NOK;
     434:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return BUZ_OK;
     436:	08 95       	ret

00000438 <TIM0_SyncDelay>:

void (*TIM0_OVFCallbackFn)(void) = NULL;
/*================================= Function Implementation =================================*/

en_HTIMErrorState_t TIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
     438:	8f 92       	push	r8
     43a:	9f 92       	push	r9
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	00 d0       	rcall	.+0      	; 0x452 <TIM0_SyncDelay+0x1a>
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	6b 01       	movw	r12, r22
     458:	7c 01       	movw	r14, r24
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
	Uint16_t Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     45a:	42 30       	cpi	r20, 0x02	; 2
     45c:	59 f4       	brne	.+22     	; 0x474 <TIM0_SyncDelay+0x3c>
     45e:	9b 01       	movw	r18, r22
     460:	ac 01       	movw	r20, r24
     462:	60 e4       	ldi	r22, 0x40	; 64
     464:	72 e4       	ldi	r23, 0x42	; 66
     466:	8f e0       	ldi	r24, 0x0F	; 15
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__mulsi3>
     46e:	6b 01       	movw	r12, r22
     470:	7c 01       	movw	r14, r24
     472:	0d c0       	rjmp	.+26     	; 0x48e <TIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     474:	41 30       	cpi	r20, 0x01	; 1
     476:	49 f4       	brne	.+18     	; 0x48a <TIM0_SyncDelay+0x52>
     478:	a8 ee       	ldi	r26, 0xE8	; 232
     47a:	b3 e0       	ldi	r27, 0x03	; 3
     47c:	9b 01       	movw	r18, r22
     47e:	ac 01       	movw	r20, r24
     480:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__muluhisi3>
     484:	6b 01       	movw	r12, r22
     486:	7c 01       	movw	r14, r24
     488:	02 c0       	rjmp	.+4      	; 0x48e <TIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
     48a:	41 11       	cpse	r20, r1
     48c:	6b c0       	rjmp	.+214    	; 0x564 <TIM0_SyncDelay+0x12c>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     48e:	88 e8       	ldi	r24, 0x88	; 136
     490:	c8 16       	cp	r12, r24
     492:	83 e1       	ldi	r24, 0x13	; 19
     494:	d8 06       	cpc	r13, r24
     496:	e1 04       	cpc	r14, r1
     498:	f1 04       	cpc	r15, r1
     49a:	c8 f0       	brcs	.+50     	; 0x4ce <TIM0_SyncDelay+0x96>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     49c:	88 ea       	ldi	r24, 0xA8	; 168
     49e:	c8 16       	cp	r12, r24
     4a0:	81 e6       	ldi	r24, 0x61	; 97
     4a2:	d8 06       	cpc	r13, r24
     4a4:	e1 04       	cpc	r14, r1
     4a6:	f1 04       	cpc	r15, r1
     4a8:	a0 f0       	brcs	.+40     	; 0x4d2 <TIM0_SyncDelay+0x9a>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     4aa:	88 e4       	ldi	r24, 0x48	; 72
     4ac:	c8 16       	cp	r12, r24
     4ae:	88 ee       	ldi	r24, 0xE8	; 232
     4b0:	d8 06       	cpc	r13, r24
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	e8 06       	cpc	r14, r24
     4b6:	f1 04       	cpc	r15, r1
     4b8:	70 f0       	brcs	.+28     	; 0x4d6 <TIM0_SyncDelay+0x9e>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     4ba:	80 e2       	ldi	r24, 0x20	; 32
     4bc:	c8 16       	cp	r12, r24
     4be:	81 ea       	ldi	r24, 0xA1	; 161
     4c0:	d8 06       	cpc	r13, r24
     4c2:	87 e0       	ldi	r24, 0x07	; 7
     4c4:	e8 06       	cpc	r14, r24
     4c6:	f1 04       	cpc	r15, r1
     4c8:	40 f4       	brcc	.+16     	; 0x4da <TIM0_SyncDelay+0xa2>
     4ca:	14 e0       	ldi	r17, 0x04	; 4
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <TIM0_SyncDelay+0xa4>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     4ce:	11 e0       	ldi	r17, 0x01	; 1
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <TIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     4d2:	12 e0       	ldi	r17, 0x02	; 2
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <TIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     4d6:	13 e0       	ldi	r17, 0x03	; 3
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <TIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     4da:	15 e0       	ldi	r17, 0x05	; 5
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1] / 16; //CPU Prescaler
     4dc:	e1 2f       	mov	r30, r17
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ee 5f       	subi	r30, 0xFE	; 254
     4e8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ea:	60 81       	ld	r22, Z
     4ec:	71 81       	ldd	r23, Z+1	; 0x01
     4ee:	72 95       	swap	r23
     4f0:	62 95       	swap	r22
     4f2:	6f 70       	andi	r22, 0x0F	; 15
     4f4:	67 27       	eor	r22, r23
     4f6:	7f 70       	andi	r23, 0x0F	; 15
     4f8:	67 27       	eor	r22, r23
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 6f 09 	call	0x12de	; 0x12de <__floatunsisf>
     502:	4b 01       	movw	r8, r22
     504:	5c 01       	movw	r10, r24
	Local_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     506:	c7 01       	movw	r24, r14
     508:	b6 01       	movw	r22, r12
     50a:	0e 94 6f 09 	call	0x12de	; 0x12de <__floatunsisf>
     50e:	a5 01       	movw	r20, r10
     510:	94 01       	movw	r18, r8
     512:	0e 94 ce 08 	call	0x119c	; 0x119c <__divsf3>
     516:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixunssfsi>
     51a:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
     51c:	07 2f       	mov	r16, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 76 08 	call	0x10ec	; 0x10ec <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
     524:	8f 2d       	mov	r24, r15
     526:	81 95       	neg	r24
     528:	0e 94 a5 08 	call	0x114a	; 0x114a <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     52c:	81 2f       	mov	r24, r17
     52e:	0e 94 8f 08 	call	0x111e	; 0x111e <TIM0_Start>
void (*TIM0_OVFCallbackFn)(void) = NULL;
/*================================= Function Implementation =================================*/

en_HTIMErrorState_t TIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
     532:	10 e0       	ldi	r17, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     534:	11 c0       	rjmp	.+34     	; 0x558 <TIM0_SyncDelay+0x120>
	{
		/* Wait until the overflow flag is raised */
		do
		{
			TIM0_GetOVF(&u8_l_OverflowFlag);
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 a7 08 	call	0x114e	; 0x114e <TIM0_GetOVF>
			TIM0_GetState(&u8_l_TimState);
     53e:	ce 01       	movw	r24, r28
     540:	02 96       	adiw	r24, 0x02	; 2
     542:	0e 94 b5 08 	call	0x116a	; 0x116a <TIM0_GetState>
		}
		while(!u8_l_OverflowFlag && u8_l_TimState);
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	81 11       	cpse	r24, r1
     54a:	03 c0       	rjmp	.+6      	; 0x552 <TIM0_SyncDelay+0x11a>
     54c:	8a 81       	ldd	r24, Y+2	; 0x02
     54e:	81 11       	cpse	r24, r1
     550:	f2 cf       	rjmp	.-28     	; 0x536 <TIM0_SyncDelay+0xfe>
		
		/* Clear the overflow flag */
		TIM0_ClearOVF();
     552:	0e 94 b1 08 	call	0x1162	; 0x1162 <TIM0_ClearOVF>
		
		Local_OverFlowCounter++;
     556:	1f 5f       	subi	r17, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     558:	01 17       	cp	r16, r17
     55a:	68 f7       	brcc	.-38     	; 0x536 <TIM0_SyncDelay+0xfe>
		TIM0_ClearOVF();
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
     55c:	0e 94 9d 08 	call	0x113a	; 0x113a <TIM0_Stop>
	
	return TIM_OK;
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	01 c0       	rjmp	.+2      	; 0x566 <TIM0_SyncDelay+0x12e>
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     564:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM0_Stop();
	
	return TIM_OK;
}
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	bf 90       	pop	r11
     57c:	af 90       	pop	r10
     57e:	9f 90       	pop	r9
     580:	8f 90       	pop	r8
     582:	08 95       	ret

00000584 <TIM0_AsyncDelay>:

en_HTIMErrorState_t TIM0_AsyncDelay(Uint32_t u32_a_delay, en_timeUnits_t u8_a_timeUnit, void (*Copy_pvCallbackFn)(void))
{
     584:	4f 92       	push	r4
     586:	5f 92       	push	r5
     588:	6f 92       	push	r6
     58a:	7f 92       	push	r7
     58c:	bf 92       	push	r11
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	1f 92       	push	r1
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	6b 01       	movw	r12, r22
     5a6:	7c 01       	movw	r14, r24
     5a8:	b4 2e       	mov	r11, r20
     5aa:	89 01       	movw	r16, r18
	Uchar8_t u8_l_prescaler, u8_l_TimState;
	Uint16_t u8_l_TotalTicks;
	float Local_TickTime;
	
	/* Check whether timer is Idle or Busy */
	TIM0_GetState(&u8_l_TimState);
     5ac:	ce 01       	movw	r24, r28
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	0e 94 b5 08 	call	0x116a	; 0x116a <TIM0_GetState>
	if(u8_l_TimState) return TIM_NOK;
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	81 11       	cpse	r24, r1
     5b8:	79 c0       	rjmp	.+242    	; 0x6ac <TIM0_AsyncDelay+0x128>
	
	/* Get Value in micro seconds */
	if(u8_a_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	b8 12       	cpse	r11, r24
     5be:	0b c0       	rjmp	.+22     	; 0x5d6 <TIM0_AsyncDelay+0x52>
     5c0:	a7 01       	movw	r20, r14
     5c2:	96 01       	movw	r18, r12
     5c4:	60 e4       	ldi	r22, 0x40	; 64
     5c6:	72 e4       	ldi	r23, 0x42	; 66
     5c8:	8f e0       	ldi	r24, 0x0F	; 15
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 8e 0a 	call	0x151c	; 0x151c <__mulsi3>
     5d0:	6b 01       	movw	r12, r22
     5d2:	7c 01       	movw	r14, r24
     5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <TIM0_AsyncDelay+0x6e>
	else if(u8_a_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	b8 12       	cpse	r11, r24
     5da:	09 c0       	rjmp	.+18     	; 0x5ee <TIM0_AsyncDelay+0x6a>
     5dc:	a8 ee       	ldi	r26, 0xE8	; 232
     5de:	b3 e0       	ldi	r27, 0x03	; 3
     5e0:	a7 01       	movw	r20, r14
     5e2:	96 01       	movw	r18, r12
     5e4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__muluhisi3>
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <TIM0_AsyncDelay+0x6e>
	else if(u8_a_timeUnit == uSeconds)	{/* Do Nothing */}
     5ee:	b1 10       	cpse	r11, r1
     5f0:	5f c0       	rjmp	.+190    	; 0x6b0 <TIM0_AsyncDelay+0x12c>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     5f2:	88 e8       	ldi	r24, 0x88	; 136
     5f4:	c8 16       	cp	r12, r24
     5f6:	83 e1       	ldi	r24, 0x13	; 19
     5f8:	d8 06       	cpc	r13, r24
     5fa:	e1 04       	cpc	r14, r1
     5fc:	f1 04       	cpc	r15, r1
     5fe:	d8 f0       	brcs	.+54     	; 0x636 <TIM0_AsyncDelay+0xb2>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     600:	88 ea       	ldi	r24, 0xA8	; 168
     602:	c8 16       	cp	r12, r24
     604:	81 e6       	ldi	r24, 0x61	; 97
     606:	d8 06       	cpc	r13, r24
     608:	e1 04       	cpc	r14, r1
     60a:	f1 04       	cpc	r15, r1
     60c:	b8 f0       	brcs	.+46     	; 0x63c <TIM0_AsyncDelay+0xb8>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     60e:	88 e4       	ldi	r24, 0x48	; 72
     610:	c8 16       	cp	r12, r24
     612:	88 ee       	ldi	r24, 0xE8	; 232
     614:	d8 06       	cpc	r13, r24
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	e8 06       	cpc	r14, r24
     61a:	f1 04       	cpc	r15, r1
     61c:	98 f0       	brcs	.+38     	; 0x644 <TIM0_AsyncDelay+0xc0>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     61e:	80 e2       	ldi	r24, 0x20	; 32
     620:	c8 16       	cp	r12, r24
     622:	81 ea       	ldi	r24, 0xA1	; 161
     624:	d8 06       	cpc	r13, r24
     626:	87 e0       	ldi	r24, 0x07	; 7
     628:	e8 06       	cpc	r14, r24
     62a:	f1 04       	cpc	r15, r1
     62c:	80 f4       	brcc	.+32     	; 0x64e <TIM0_AsyncDelay+0xca>
     62e:	68 94       	set
     630:	bb 24       	eor	r11, r11
     632:	b2 f8       	bld	r11, 2
     634:	10 c0       	rjmp	.+32     	; 0x656 <TIM0_AsyncDelay+0xd2>
	else if(u8_a_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(u8_a_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     636:	bb 24       	eor	r11, r11
     638:	b3 94       	inc	r11
     63a:	0d c0       	rjmp	.+26     	; 0x656 <TIM0_AsyncDelay+0xd2>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     63c:	68 94       	set
     63e:	bb 24       	eor	r11, r11
     640:	b1 f8       	bld	r11, 1
     642:	09 c0       	rjmp	.+18     	; 0x656 <TIM0_AsyncDelay+0xd2>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     644:	0f 2e       	mov	r0, r31
     646:	f3 e0       	ldi	r31, 0x03	; 3
     648:	bf 2e       	mov	r11, r31
     64a:	f0 2d       	mov	r31, r0
     64c:	04 c0       	rjmp	.+8      	; 0x656 <TIM0_AsyncDelay+0xd2>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     64e:	0f 2e       	mov	r0, r31
     650:	f5 e0       	ldi	r31, 0x05	; 5
     652:	bf 2e       	mov	r11, r31
     654:	f0 2d       	mov	r31, r0
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1]; //CPU Prescaler
     656:	eb 2d       	mov	r30, r11
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	ee 5f       	subi	r30, 0xFE	; 254
     662:	fe 4f       	sbci	r31, 0xFE	; 254
     664:	60 81       	ld	r22, Z
     666:	71 81       	ldd	r23, Z+1	; 0x01
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 6f 09 	call	0x12de	; 0x12de <__floatunsisf>
     670:	2b 01       	movw	r4, r22
     672:	3c 01       	movw	r6, r24
	u8_l_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     674:	c7 01       	movw	r24, r14
     676:	b6 01       	movw	r22, r12
     678:	0e 94 6f 09 	call	0x12de	; 0x12de <__floatunsisf>
     67c:	a3 01       	movw	r20, r6
     67e:	92 01       	movw	r18, r4
     680:	0e 94 ce 08 	call	0x119c	; 0x119c <__divsf3>
     684:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixunssfsi>
     688:	f6 2e       	mov	r15, r22
	u8_gs_TotalOVF = u8_l_TotalTicks/TIM0_MAX_TICKS;
     68a:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <u8_gs_TotalOVF>
	
	/*Set the callback function */
	 TIM0_OVFCallbackFn = Copy_pvCallbackFn;
     68e:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <TIM0_OVFCallbackFn+0x1>
     692:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <TIM0_OVFCallbackFn>
	/* Enable Timer 0 overflow interrupt */
	TIM0_EnableInterrupt();
     696:	0e 94 c5 08 	call	0x118a	; 0x118a <TIM0_EnableInterrupt>
	//SET_BIT(TIMSK, TIMSK_TOIE0);
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(u8_l_TotalTicks%TIM0_MAX_TICKS));
     69a:	8f 2d       	mov	r24, r15
     69c:	81 95       	neg	r24
     69e:	0e 94 a5 08 	call	0x114a	; 0x114a <TIM0_SetValue>
	
	/* Set the function state as busy */
	u8_gs_delayStatusFlag = DELAY_BUSY;
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     6a2:	8b 2d       	mov	r24, r11
     6a4:	0e 94 8f 08 	call	0x111e	; 0x111e <TIM0_Start>
	
	return TIM_OK;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <TIM0_AsyncDelay+0x12e>
	Uint16_t u8_l_TotalTicks;
	float Local_TickTime;
	
	/* Check whether timer is Idle or Busy */
	TIM0_GetState(&u8_l_TimState);
	if(u8_l_TimState) return TIM_NOK;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <TIM0_AsyncDelay+0x12e>
	
	/* Get Value in micro seconds */
	if(u8_a_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(u8_a_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(u8_a_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	return TIM_OK;
}
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	7f 90       	pop	r7
     6c8:	6f 90       	pop	r6
     6ca:	5f 90       	pop	r5
     6cc:	4f 90       	pop	r4
     6ce:	08 95       	ret

000006d0 <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	82 e1       	ldi	r24, 0x12	; 18
     6d4:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	83 e1       	ldi	r24, 0x13	; 19
     6dc:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	85 e1       	ldi	r24, 0x15	; 21
     6ec:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	86 e1       	ldi	r24, 0x16	; 22
     6f4:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	87 e1       	ldi	r24, 0x17	; 23
     6fc:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
     700:	08 95       	ret

00000702 <checkR1>:
	
	//KEYPAD_DIR &=~(1<<C1) | (1<<C2) | (1<<C3); // COLUMNS ARE INPUTS
	//KEYPAD_DIR |= (1<<R1) | (1<<R2) | (1<<R3); // ROWS ARE OUTPUTS
}
EN_KEYPAD_BTNS checkR1()
{
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	85 e1       	ldi	r24, 0x15	; 21
     710:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	86 e1       	ldi	r24, 0x16	; 22
     718:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	87 e1       	ldi	r24, 0x17	; 23
     720:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	83 e1       	ldi	r24, 0x13	; 19
     728:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	84 e1       	ldi	r24, 0x14	; 20
     730:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	82 e1       	ldi	r24, 0x12	; 18
     738:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	//KEYPAD_PORT |= (1<<C1) | (1<<C2) |(1<<C3) | (1<<R2) | (1<<R3);
	//KEYPAD_PORT &=~ (1<<R1);
	Uchar8_t val = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     740:	be 01       	movw	r22, r28
     742:	6f 5f       	subi	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	85 e1       	ldi	r24, 0x15	; 21
     748:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	88 23       	and	r24, r24
     750:	39 f0       	breq	.+14     	; 0x760 <checkR1+0x5e>
     752:	0b c0       	rjmp	.+22     	; 0x76a <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     754:	be 01       	movw	r22, r28
     756:	6f 5f       	subi	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	85 e1       	ldi	r24, 0x15	; 21
     75c:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	//KEYPAD_PORT &=~ (1<<R1);
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	88 23       	and	r24, r24
     764:	b9 f3       	breq	.-18     	; 0x754 <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_INCREAMENT;
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	2e c0       	rjmp	.+92     	; 0x7c6 <checkR1+0xc4>
	}
	val = 1;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     76e:	be 01       	movw	r22, r28
     770:	6f 5f       	subi	r22, 0xFF	; 255
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	86 e1       	ldi	r24, 0x16	; 22
     776:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	88 23       	and	r24, r24
     77e:	39 f0       	breq	.+14     	; 0x78e <checkR1+0x8c>
     780:	0b c0       	rjmp	.+22     	; 0x798 <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     782:	be 01       	movw	r22, r28
     784:	6f 5f       	subi	r22, 0xFF	; 255
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	86 e1       	ldi	r24, 0x16	; 22
     78a:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	88 23       	and	r24, r24
     792:	b9 f3       	breq	.-18     	; 0x782 <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_DECREAMENT;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	17 c0       	rjmp	.+46     	; 0x7c6 <checkR1+0xc4>
	}
	val = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     79c:	be 01       	movw	r22, r28
     79e:	6f 5f       	subi	r22, 0xFF	; 255
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	87 e1       	ldi	r24, 0x17	; 23
     7a4:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	88 23       	and	r24, r24
     7ac:	41 f0       	breq	.+16     	; 0x7be <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_SET;
	}
	return KEY_NOTHING;
     7ae:	89 e0       	ldi	r24, 0x09	; 9
     7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     7b2:	be 01       	movw	r22, r28
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	87 e1       	ldi	r24, 0x17	; 23
     7ba:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	88 23       	and	r24, r24
     7c2:	b9 f3       	breq	.-18     	; 0x7b2 <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_SET;
     7c4:	82 e0       	ldi	r24, 0x02	; 2
	}
	return KEY_NOTHING;
	
}
     7c6:	0f 90       	pop	r0
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	//KEYPAD_PORT |= (1<<C1) | (1<<C2) |(1<<C3) | (1<<R1) | (1<<R3);
	//KEYPAD_PORT &=~ (1<<R2);
	DIO_s8SETPinVal(C1,HIGH);
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	85 e1       	ldi	r24, 0x15	; 21
     7dc:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	86 e1       	ldi	r24, 0x16	; 22
     7e4:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	87 e1       	ldi	r24, 0x17	; 23
     7ec:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	82 e1       	ldi	r24, 0x12	; 18
     7f4:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	84 e1       	ldi	r24, 0x14	; 20
     7fc:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	83 e1       	ldi	r24, 0x13	; 19
     804:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     80c:	be 01       	movw	r22, r28
     80e:	6f 5f       	subi	r22, 0xFF	; 255
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	85 e1       	ldi	r24, 0x15	; 21
     814:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	88 23       	and	r24, r24
     81c:	39 f0       	breq	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     81e:	0b c0       	rjmp	.+22     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     820:	be 01       	movw	r22, r28
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	85 e1       	ldi	r24, 0x15	; 21
     828:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	88 23       	and	r24, r24
     830:	b9 f3       	breq	.-18     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_ADJUST;
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
	}
	val = 1;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     83a:	be 01       	movw	r22, r28
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	86 e1       	ldi	r24, 0x16	; 22
     842:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	88 23       	and	r24, r24
     84a:	39 f0       	breq	.+14     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     84c:	0b c0       	rjmp	.+22     	; 0x864 <__stack+0x5>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	86 e1       	ldi	r24, 0x16	; 22
     856:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	88 23       	and	r24, r24
     85e:	b9 f3       	breq	.-18     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_RESET;
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	17 c0       	rjmp	.+46     	; 0x892 <__stack+0x33>
	}
	val = 1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	87 e1       	ldi	r24, 0x17	; 23
     870:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	88 23       	and	r24, r24
     878:	41 f0       	breq	.+16     	; 0x88a <__stack+0x2b>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_ADJUST;
	}
	return KEY_NOTHING;
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	0a c0       	rjmp	.+20     	; 0x892 <__stack+0x33>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	87 e1       	ldi	r24, 0x17	; 23
     886:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	88 23       	and	r24, r24
     88e:	b9 f3       	breq	.-18     	; 0x87e <__stack+0x1f>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_ADJUST;
     890:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	1f 92       	push	r1
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
	//KEYPAD_PORT |= (1<<C1) | (1<<C2) |(1<<C3) | (1<<R1) | (1<<R2);
	//KEYPAD_PORT &=~ (1<<R3);
	DIO_s8SETPinVal(C1,HIGH);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	85 e1       	ldi	r24, 0x15	; 21
     8a8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	86 e1       	ldi	r24, 0x16	; 22
     8b0:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	87 e1       	ldi	r24, 0x17	; 23
     8b8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	82 e1       	ldi	r24, 0x12	; 18
     8c0:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	83 e1       	ldi	r24, 0x13	; 19
     8c8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	84 e1       	ldi	r24, 0x14	; 20
     8d0:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     8d8:	be 01       	movw	r22, r28
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	85 e1       	ldi	r24, 0x15	; 21
     8e0:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	88 23       	and	r24, r24
     8e8:	39 f0       	breq	.+14     	; 0x8f8 <checkR3+0x5e>
     8ea:	0b c0       	rjmp	.+22     	; 0x902 <checkR3+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     8ec:	be 01       	movw	r22, r28
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	85 e1       	ldi	r24, 0x15	; 21
     8f4:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	88 23       	and	r24, r24
     8fc:	b9 f3       	breq	.-18     	; 0x8ec <checkR3+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
     8fe:	86 e0       	ldi	r24, 0x06	; 6
     900:	2e c0       	rjmp	.+92     	; 0x95e <checkR3+0xc4>
	}
	val = 1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     906:	be 01       	movw	r22, r28
     908:	6f 5f       	subi	r22, 0xFF	; 255
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	86 e1       	ldi	r24, 0x16	; 22
     90e:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     912:	89 81       	ldd	r24, Y+1	; 0x01
     914:	88 23       	and	r24, r24
     916:	39 f0       	breq	.+14     	; 0x926 <checkR3+0x8c>
     918:	0b c0       	rjmp	.+22     	; 0x930 <checkR3+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     91a:	be 01       	movw	r22, r28
     91c:	6f 5f       	subi	r22, 0xFF	; 255
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	86 e1       	ldi	r24, 0x16	; 22
     922:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	88 23       	and	r24, r24
     92a:	b9 f3       	breq	.-18     	; 0x91a <checkR3+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
     92c:	87 e0       	ldi	r24, 0x07	; 7
     92e:	17 c0       	rjmp	.+46     	; 0x95e <checkR3+0xc4>
	}
	val = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     934:	be 01       	movw	r22, r28
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	87 e1       	ldi	r24, 0x17	; 23
     93c:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	if(val == 0)
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	88 23       	and	r24, r24
     944:	41 f0       	breq	.+16     	; 0x956 <checkR3+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	0a c0       	rjmp	.+20     	; 0x95e <checkR3+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	87 e1       	ldi	r24, 0x17	; 23
     952:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	88 23       	and	r24, r24
     95a:	b9 f3       	breq	.-18     	; 0x94a <checkR3+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
     95c:	88 e0       	ldi	r24, 0x08	; 8
	}
	return KEY_NOTHING;
}
     95e:	0f 90       	pop	r0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <GetButton>:
EN_KEYPAD_BTNS GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
     966:	0e 94 81 03 	call	0x702	; 0x702 <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     96a:	89 30       	cpi	r24, 0x09	; 9
     96c:	31 f4       	brne	.+12     	; 0x97a <GetButton+0x14>
		PRESSED = checkR2();
     96e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     972:	89 30       	cpi	r24, 0x09	; 9
     974:	11 f4       	brne	.+4      	; 0x97a <GetButton+0x14>
		PRESSED = checkR3();
     976:	0e 94 4d 04 	call	0x89a	; 0x89a <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
     97a:	08 95       	ret

0000097c <HLCD_vidWritecmd>:
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	d8 2f       	mov	r29, r24
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     994:	1d 2f       	mov	r17, r29
     996:	12 95       	swap	r17
     998:	1f 70       	andi	r17, 0x0F	; 15
     99a:	c0 e0       	ldi	r28, 0x00	; 0
     99c:	11 c0       	rjmp	.+34     	; 0x9c0 <HLCD_vidWritecmd+0x44>
     99e:	ec 2f       	mov	r30, r28
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	61 2f       	mov	r22, r17
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0c 2e       	mov	r0, r28
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <HLCD_vidWritecmd+0x32>
     9aa:	75 95       	asr	r23
     9ac:	67 95       	ror	r22
     9ae:	0a 94       	dec	r0
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <HLCD_vidWritecmd+0x2e>
     9b2:	61 70       	andi	r22, 0x01	; 1
     9b4:	e6 59       	subi	r30, 0x96	; 150
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	80 81       	ld	r24, Z
     9ba:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     9be:	cf 5f       	subi	r28, 0xFF	; 255
     9c0:	c4 30       	cpi	r28, 0x04	; 4
     9c2:	68 f3       	brcs	.-38     	; 0x99e <HLCD_vidWritecmd+0x22>
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     9cc:	89 ef       	ldi	r24, 0xF9	; 249
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <HLCD_vidWritecmd+0x54>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <HLCD_vidWritecmd+0x5a>
     9d6:	00 00       	nop
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     9e0:	92 e4       	ldi	r25, 0x42	; 66
     9e2:	9a 95       	dec	r25
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <HLCD_vidWritecmd+0x66>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <HLCD_vidWritecmd+0x6c>
     9e8:	df 70       	andi	r29, 0x0F	; 15
     9ea:	c0 e0       	ldi	r28, 0x00	; 0
     9ec:	11 c0       	rjmp	.+34     	; 0xa10 <HLCD_vidWritecmd+0x94>
     9ee:	ec 2f       	mov	r30, r28
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	6d 2f       	mov	r22, r29
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	0c 2e       	mov	r0, r28
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <HLCD_vidWritecmd+0x82>
     9fa:	75 95       	asr	r23
     9fc:	67 95       	ror	r22
     9fe:	0a 94       	dec	r0
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <HLCD_vidWritecmd+0x7e>
     a02:	61 70       	andi	r22, 0x01	; 1
     a04:	e6 59       	subi	r30, 0x96	; 150
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	80 81       	ld	r24, Z
     a0a:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     a0e:	cf 5f       	subi	r28, 0xFF	; 255
     a10:	c4 30       	cpi	r28, 0x04	; 4
     a12:	68 f3       	brcs	.-38     	; 0x9ee <HLCD_vidWritecmd+0x72>
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     a1c:	89 ef       	ldi	r24, 0xF9	; 249
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <HLCD_vidWritecmd+0xa4>
     a24:	00 c0       	rjmp	.+0      	; 0xa26 <HLCD_vidWritecmd+0xaa>
     a26:	00 00       	nop
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     a30:	83 ef       	ldi	r24, 0xF3	; 243
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <HLCD_vidWritecmd+0xb8>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <HLCD_vidWritecmd+0xbe>
     a3a:	00 00       	nop
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	08 95       	ret

00000a44 <HLCD_vidInit>:
     a44:	cf 93       	push	r28
     a46:	c0 e0       	ldi	r28, 0x00	; 0
     a48:	09 c0       	rjmp	.+18     	; 0xa5c <HLCD_vidInit+0x18>
     a4a:	ec 2f       	mov	r30, r28
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	e6 59       	subi	r30, 0x96	; 150
     a50:	ff 4f       	sbci	r31, 0xFF	; 255
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	80 81       	ld	r24, Z
     a56:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
     a5a:	cf 5f       	subi	r28, 0xFF	; 255
     a5c:	c4 30       	cpi	r28, 0x04	; 4
     a5e:	a8 f3       	brcs	.-22     	; 0xa4a <HLCD_vidInit+0x6>
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
     a78:	8f e0       	ldi	r24, 0x0F	; 15
     a7a:	97 e2       	ldi	r25, 0x27	; 39
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <HLCD_vidInit+0x38>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <HLCD_vidInit+0x3e>
     a82:	00 00       	nop
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     a8a:	89 ef       	ldi	r24, 0xF9	; 249
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <HLCD_vidInit+0x4a>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <HLCD_vidInit+0x50>
     a94:	00 00       	nop
     a96:	88 e2       	ldi	r24, 0x28	; 40
     a98:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     a9c:	89 ef       	ldi	r24, 0xF9	; 249
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <HLCD_vidInit+0x5c>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <HLCD_vidInit+0x62>
     aa6:	00 00       	nop
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     aae:	87 ee       	ldi	r24, 0xE7	; 231
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <HLCD_vidInit+0x6e>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <HLCD_vidInit+0x74>
     ab8:	00 00       	nop
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     ac0:	89 ef       	ldi	r24, 0xF9	; 249
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <HLCD_vidInit+0x80>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <HLCD_vidInit+0x86>
     aca:	00 00       	nop
     acc:	8e e0       	ldi	r24, 0x0E	; 14
     ace:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     ad2:	89 ef       	ldi	r24, 0xF9	; 249
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <HLCD_vidInit+0x92>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <HLCD_vidInit+0x98>
     adc:	00 00       	nop
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <HLCD_vidWriteChar>:
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	d8 2f       	mov	r29, r24
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     afa:	1d 2f       	mov	r17, r29
     afc:	12 95       	swap	r17
     afe:	1f 70       	andi	r17, 0x0F	; 15
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	11 c0       	rjmp	.+34     	; 0xb26 <HLCD_vidWriteChar+0x44>
     b04:	ec 2f       	mov	r30, r28
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	61 2f       	mov	r22, r17
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	0c 2e       	mov	r0, r28
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <HLCD_vidWriteChar+0x32>
     b10:	75 95       	asr	r23
     b12:	67 95       	ror	r22
     b14:	0a 94       	dec	r0
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <HLCD_vidWriteChar+0x2e>
     b18:	61 70       	andi	r22, 0x01	; 1
     b1a:	e6 59       	subi	r30, 0x96	; 150
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	80 81       	ld	r24, Z
     b20:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     b24:	cf 5f       	subi	r28, 0xFF	; 255
     b26:	c4 30       	cpi	r28, 0x04	; 4
     b28:	68 f3       	brcs	.-38     	; 0xb04 <HLCD_vidWriteChar+0x22>
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     b32:	89 ef       	ldi	r24, 0xF9	; 249
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <HLCD_vidWriteChar+0x54>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <HLCD_vidWriteChar+0x5a>
     b3c:	00 00       	nop
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     b46:	92 e4       	ldi	r25, 0x42	; 66
     b48:	9a 95       	dec	r25
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <HLCD_vidWriteChar+0x66>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <HLCD_vidWriteChar+0x6c>
     b4e:	df 70       	andi	r29, 0x0F	; 15
     b50:	c0 e0       	ldi	r28, 0x00	; 0
     b52:	11 c0       	rjmp	.+34     	; 0xb76 <HLCD_vidWriteChar+0x94>
     b54:	ec 2f       	mov	r30, r28
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	6d 2f       	mov	r22, r29
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	0c 2e       	mov	r0, r28
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <HLCD_vidWriteChar+0x82>
     b60:	75 95       	asr	r23
     b62:	67 95       	ror	r22
     b64:	0a 94       	dec	r0
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <HLCD_vidWriteChar+0x7e>
     b68:	61 70       	andi	r22, 0x01	; 1
     b6a:	e6 59       	subi	r30, 0x96	; 150
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	80 81       	ld	r24, Z
     b70:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     b74:	cf 5f       	subi	r28, 0xFF	; 255
     b76:	c4 30       	cpi	r28, 0x04	; 4
     b78:	68 f3       	brcs	.-38     	; 0xb54 <HLCD_vidWriteChar+0x72>
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     b82:	89 ef       	ldi	r24, 0xF9	; 249
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <HLCD_vidWriteChar+0xa4>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <HLCD_vidWriteChar+0xaa>
     b8c:	00 00       	nop
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_s8SETPinVal>
     b96:	83 ef       	ldi	r24, 0xF3	; 243
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <HLCD_vidWriteChar+0xb8>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <HLCD_vidWriteChar+0xbe>
     ba0:	00 00       	nop
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	08 95       	ret

00000baa <HLCD_ClrDisplay>:
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     bb0:	87 ee       	ldi	r24, 0xE7	; 231
     bb2:	93 e0       	ldi	r25, 0x03	; 3
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <HLCD_ClrDisplay+0xa>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <HLCD_ClrDisplay+0x10>
     bba:	00 00       	nop
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     bc2:	87 ee       	ldi	r24, 0xE7	; 231
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <HLCD_ClrDisplay+0x1c>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <HLCD_ClrDisplay+0x22>
     bcc:	00 00       	nop
     bce:	08 95       	ret

00000bd0 <HLCD_gotoXY>:
     bd0:	81 11       	cpse	r24, r1
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <HLCD_gotoXY+0x14>
     bd4:	60 31       	cpi	r22, 0x10	; 16
     bd6:	30 f4       	brcc	.+12     	; 0xbe4 <HLCD_gotoXY+0x14>
     bd8:	86 2f       	mov	r24, r22
     bda:	8f 70       	andi	r24, 0x0F	; 15
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     be2:	08 95       	ret
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	39 f4       	brne	.+14     	; 0xbf6 <HLCD_gotoXY+0x26>
     be8:	60 31       	cpi	r22, 0x10	; 16
     bea:	28 f4       	brcc	.+10     	; 0xbf6 <HLCD_gotoXY+0x26>
     bec:	86 2f       	mov	r24, r22
     bee:	8f 70       	andi	r24, 0x0F	; 15
     bf0:	80 6c       	ori	r24, 0xC0	; 192
     bf2:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
     bf6:	08 95       	ret

00000bf8 <HLCD_WriteString>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	8c 01       	movw	r16, r24
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	c0 e0       	ldi	r28, 0x00	; 0
     c08:	d0 e0       	ldi	r29, 0x00	; 0
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <HLCD_WriteString+0x22>
     c0c:	0e 94 71 05 	call	0xae2	; 0xae2 <HLCD_vidWriteChar>
     c10:	21 96       	adiw	r28, 0x01	; 1
     c12:	f8 01       	movw	r30, r16
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	80 81       	ld	r24, Z
     c1a:	81 11       	cpse	r24, r1
     c1c:	f7 cf       	rjmp	.-18     	; 0xc0c <HLCD_WriteString+0x14>
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <HLCD_WriteInt>:
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	2a 97       	sbiw	r28, 0x0a	; 10
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	4a e0       	ldi	r20, 0x0A	; 10
     c42:	be 01       	movw	r22, r28
     c44:	6f 5f       	subi	r22, 0xFF	; 255
     c46:	7f 4f       	sbci	r23, 0xFF	; 255
     c48:	0e 94 be 0a 	call	0x157c	; 0x157c <__itoa_ncheck>
     c4c:	ce 01       	movw	r24, r28
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <HLCD_WriteString>
     c54:	2a 96       	adiw	r28, 0x0a	; 10
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <HLCD_vidCreatCustomChar>:
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	68 30       	cpi	r22, 0x08	; 8
     c6e:	d0 f4       	brcc	.+52     	; 0xca4 <HLCD_vidCreatCustomChar+0x3e>
     c70:	8c 01       	movw	r16, r24
     c72:	86 2f       	mov	r24, r22
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	08 96       	adiw	r24, 0x08	; 8
     c78:	88 0f       	add	r24, r24
     c7a:	88 0f       	add	r24, r24
     c7c:	88 0f       	add	r24, r24
     c7e:	0e 94 be 04 	call	0x97c	; 0x97c <HLCD_vidWritecmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c82:	89 ef       	ldi	r24, 0xF9	; 249
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <HLCD_vidCreatCustomChar+0x20>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <HLCD_vidCreatCustomChar+0x26>
     c8c:	00 00       	nop
     c8e:	c0 e0       	ldi	r28, 0x00	; 0
     c90:	07 c0       	rjmp	.+14     	; 0xca0 <HLCD_vidCreatCustomChar+0x3a>
     c92:	f8 01       	movw	r30, r16
     c94:	ec 0f       	add	r30, r28
     c96:	f1 1d       	adc	r31, r1
     c98:	80 81       	ld	r24, Z
     c9a:	0e 94 71 05 	call	0xae2	; 0xae2 <HLCD_vidWriteChar>
     c9e:	cf 5f       	subi	r28, 0xFF	; 255
     ca0:	c8 30       	cpi	r28, 0x08	; 8
     ca2:	b8 f3       	brcs	.-18     	; 0xc92 <HLCD_vidCreatCustomChar+0x2c>
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <TSENSOR_Init>:
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	80 81       	ld	r24, Z
     cb2:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_s8SETPinDir>
     cb6:	08 95       	ret

00000cb8 <TSENSOR_ReadValue>:
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <TSENSOR_ReadValue+0xa>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	89 2b       	or	r24, r25
     cc8:	09 f4       	brne	.+2      	; 0xccc <TSENSOR_ReadValue+0x14>
     cca:	49 c0       	rjmp	.+146    	; 0xd5e <TSENSOR_ReadValue+0xa6>
     ccc:	61 15       	cp	r22, r1
     cce:	71 05       	cpc	r23, r1
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <TSENSOR_ReadValue+0x1c>
     cd2:	47 c0       	rjmp	.+142    	; 0xd62 <TSENSOR_ReadValue+0xaa>
     cd4:	8b 01       	movw	r16, r22
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	be 01       	movw	r22, r28
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	8e e6       	ldi	r24, 0x6E	; 110
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 b2 07 	call	0xf64	; 0xf64 <ADC_Conversion>
     ce6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <st_g_ADC_Config+0x2>
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	69 f4       	brne	.+26     	; 0xd08 <TSENSOR_ReadValue+0x50>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a0 ea       	ldi	r26, 0xA0	; 160
     cf4:	bb e3       	ldi	r27, 0x3B	; 59
     cf6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <f32_g_StepSize>
     cfa:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <f32_g_StepSize+0x1>
     cfe:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <f32_g_StepSize+0x2>
     d02:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <f32_g_StepSize+0x3>
     d06:	0e c0       	rjmp	.+28     	; 0xd24 <TSENSOR_ReadValue+0x6c>
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	61 f4       	brne	.+24     	; 0xd24 <TSENSOR_ReadValue+0x6c>
     d0c:	8a e0       	ldi	r24, 0x0A	; 10
     d0e:	97 ed       	ldi	r25, 0xD7	; 215
     d10:	a3 e2       	ldi	r26, 0x23	; 35
     d12:	bb e3       	ldi	r27, 0x3B	; 59
     d14:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <f32_g_StepSize>
     d18:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <f32_g_StepSize+0x1>
     d1c:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <f32_g_StepSize+0x2>
     d20:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <f32_g_StepSize+0x3>
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	24 e6       	ldi	r18, 0x64	; 100
     d2a:	28 9f       	mul	r18, r24
     d2c:	b0 01       	movw	r22, r0
     d2e:	29 9f       	mul	r18, r25
     d30:	70 0d       	add	r23, r0
     d32:	11 24       	eor	r1, r1
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 6f 09 	call	0x12de	; 0x12de <__floatunsisf>
     d3c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <f32_g_StepSize>
     d40:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <f32_g_StepSize+0x1>
     d44:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <f32_g_StepSize+0x2>
     d48:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <f32_g_StepSize+0x3>
     d4c:	0e 94 21 0a 	call	0x1442	; 0x1442 <__mulsf3>
     d50:	f8 01       	movw	r30, r16
     d52:	60 83       	st	Z, r22
     d54:	71 83       	std	Z+1, r23	; 0x01
     d56:	82 83       	std	Z+2, r24	; 0x02
     d58:	93 83       	std	Z+3, r25	; 0x03
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <TSENSOR_ReadValue+0xac>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <TSENSOR_ReadValue+0xac>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <main>:
#define F_CPU 16000000UL

void main(void)
{

	APP_Init();
     d72:	0e 94 89 00 	call	0x112	; 0x112 <APP_Init>
	
	while(1)
	{
		
		APP_Start();
     d76:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <APP_Start>
     d7a:	fd cf       	rjmp	.-6      	; 0xd76 <main+0x4>

00000d7c <ADC_Init>:
		ADC_INTERRUPT_DISABLE();
		ret = E_OK;
	}

	return ret;
}
     d7c:	dc 01       	movw	r26, r24
     d7e:	89 2b       	or	r24, r25
     d80:	09 f4       	brne	.+2      	; 0xd84 <ADC_Init+0x8>
     d82:	6a c0       	rjmp	.+212    	; 0xe58 <ADC_Init+0xdc>
     d84:	86 b1       	in	r24, 0x06	; 6
     d86:	8f 77       	andi	r24, 0x7F	; 127
     d88:	86 b9       	out	0x06, r24	; 6
     d8a:	12 96       	adiw	r26, 0x02	; 2
     d8c:	8c 91       	ld	r24, X
     d8e:	12 97       	sbiw	r26, 0x02	; 2
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	41 f0       	breq	.+16     	; 0xda4 <ADC_Init+0x28>
     d94:	18 f0       	brcs	.+6      	; 0xd9c <ADC_Init+0x20>
     d96:	83 30       	cpi	r24, 0x03	; 3
     d98:	51 f0       	breq	.+20     	; 0xdae <ADC_Init+0x32>
     d9a:	0c c0       	rjmp	.+24     	; 0xdb4 <ADC_Init+0x38>
     d9c:	87 b1       	in	r24, 0x07	; 7
     d9e:	8f 73       	andi	r24, 0x3F	; 63
     da0:	87 b9       	out	0x07, r24	; 7
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <ADC_Init+0x38>
     da4:	87 b1       	in	r24, 0x07	; 7
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	8f 77       	andi	r24, 0x7F	; 127
     daa:	87 b9       	out	0x07, r24	; 7
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <ADC_Init+0x38>
     dae:	87 b1       	in	r24, 0x07	; 7
     db0:	80 6c       	ori	r24, 0xC0	; 192
     db2:	87 b9       	out	0x07, r24	; 7
     db4:	14 96       	adiw	r26, 0x04	; 4
     db6:	ec 91       	ld	r30, X
     db8:	14 97       	sbiw	r26, 0x04	; 4
     dba:	4e 2f       	mov	r20, r30
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	47 30       	cpi	r20, 0x07	; 7
     dc0:	51 05       	cpc	r21, r1
     dc2:	40 f5       	brcc	.+80     	; 0xe14 <ADC_Init+0x98>
     dc4:	fa 01       	movw	r30, r20
     dc6:	e6 5d       	subi	r30, 0xD6	; 214
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__tablejump2__>
     dce:	86 b1       	in	r24, 0x06	; 6
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	89 7f       	andi	r24, 0xF9	; 249
     dd4:	86 b9       	out	0x06, r24	; 6
     dd6:	1e c0       	rjmp	.+60     	; 0xe14 <ADC_Init+0x98>
     dd8:	86 b1       	in	r24, 0x06	; 6
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	82 60       	ori	r24, 0x02	; 2
     dde:	8b 7f       	andi	r24, 0xFB	; 251
     de0:	86 b9       	out	0x06, r24	; 6
     de2:	18 c0       	rjmp	.+48     	; 0xe14 <ADC_Init+0x98>
     de4:	86 b1       	in	r24, 0x06	; 6
     de6:	83 60       	ori	r24, 0x03	; 3
     de8:	8b 7f       	andi	r24, 0xFB	; 251
     dea:	86 b9       	out	0x06, r24	; 6
     dec:	13 c0       	rjmp	.+38     	; 0xe14 <ADC_Init+0x98>
     dee:	86 b1       	in	r24, 0x06	; 6
     df0:	8c 7f       	andi	r24, 0xFC	; 252
     df2:	84 60       	ori	r24, 0x04	; 4
     df4:	86 b9       	out	0x06, r24	; 6
     df6:	0e c0       	rjmp	.+28     	; 0xe14 <ADC_Init+0x98>
     df8:	86 b1       	in	r24, 0x06	; 6
     dfa:	81 60       	ori	r24, 0x01	; 1
     dfc:	8d 7f       	andi	r24, 0xFD	; 253
     dfe:	84 60       	ori	r24, 0x04	; 4
     e00:	86 b9       	out	0x06, r24	; 6
     e02:	08 c0       	rjmp	.+16     	; 0xe14 <ADC_Init+0x98>
     e04:	86 b1       	in	r24, 0x06	; 6
     e06:	8e 7f       	andi	r24, 0xFE	; 254
     e08:	86 60       	ori	r24, 0x06	; 6
     e0a:	86 b9       	out	0x06, r24	; 6
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <ADC_Init+0x98>
     e0e:	86 b1       	in	r24, 0x06	; 6
     e10:	87 60       	ori	r24, 0x07	; 7
     e12:	86 b9       	out	0x06, r24	; 6
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	8c 91       	ld	r24, X
     e18:	13 97       	sbiw	r26, 0x03	; 3
     e1a:	88 23       	and	r24, r24
     e1c:	19 f0       	breq	.+6      	; 0xe24 <ADC_Init+0xa8>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	29 f0       	breq	.+10     	; 0xe2c <ADC_Init+0xb0>
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <ADC_Init+0xb6>
     e24:	87 b1       	in	r24, 0x07	; 7
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	87 b9       	out	0x07, r24	; 7
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <ADC_Init+0xb6>
     e2c:	87 b1       	in	r24, 0x07	; 7
     e2e:	80 62       	ori	r24, 0x20	; 32
     e30:	87 b9       	out	0x07, r24	; 7
     e32:	15 96       	adiw	r26, 0x05	; 5
     e34:	8c 91       	ld	r24, X
     e36:	88 23       	and	r24, r24
     e38:	19 f0       	breq	.+6      	; 0xe40 <ADC_Init+0xc4>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	29 f0       	breq	.+10     	; 0xe48 <ADC_Init+0xcc>
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <ADC_Init+0xd2>
     e40:	86 b1       	in	r24, 0x06	; 6
     e42:	88 60       	ori	r24, 0x08	; 8
     e44:	86 b9       	out	0x06, r24	; 6
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <ADC_Init+0xd2>
     e48:	86 b1       	in	r24, 0x06	; 6
     e4a:	87 7f       	andi	r24, 0xF7	; 247
     e4c:	86 b9       	out	0x06, r24	; 6
     e4e:	86 b1       	in	r24, 0x06	; 6
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	86 b9       	out	0x06, r24	; 6
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	08 95       	ret
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	08 95       	ret

00000e5c <ADC_SetChannel>:
Std_ReturnType ADC_SetChannel(const ST_ADC_CFG_t *_adc , EN_ADC_CHANNEL_SELECTION_t _channel)
{
	Std_ReturnType ret = E_NOT_OK;

	if(NULL == _adc)
     e5c:	89 2b       	or	r24, r25
     e5e:	f1 f1       	breq	.+124    	; 0xedc <ADC_SetChannel+0x80>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(_channel)
     e60:	86 2f       	mov	r24, r22
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	88 30       	cpi	r24, 0x08	; 8
     e66:	91 05       	cpc	r25, r1
     e68:	d8 f5       	brcc	.+118    	; 0xee0 <ADC_SetChannel+0x84>
     e6a:	fc 01       	movw	r30, r24
     e6c:	ef 5c       	subi	r30, 0xCF	; 207
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__tablejump2__>
		{
			case ADC_CHANNEL_ZERO: ADC_CHANNEL_ZERO(); break;
     e74:	87 b1       	in	r24, 0x07	; 7
     e76:	80 7f       	andi	r24, 0xF0	; 240
     e78:	87 b9       	out	0x07, r24	; 7
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		switch(_channel)
		{
			case ADC_CHANNEL_ZERO: ADC_CHANNEL_ZERO(); break;
     e7c:	08 95       	ret
			case ADC_CHANNEL_ONE: ADC_CHANNEL_ONE(); break;
     e7e:	87 b1       	in	r24, 0x07	; 7
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	81 7f       	andi	r24, 0xF1	; 241
     e84:	87 b9       	out	0x07, r24	; 7
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     e86:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		switch(_channel)
		{
			case ADC_CHANNEL_ZERO: ADC_CHANNEL_ZERO(); break;
			case ADC_CHANNEL_ONE: ADC_CHANNEL_ONE(); break;
     e88:	08 95       	ret
			case ADC_CHANNEL_TWO: ADC_CHANNEL_TWO(); break;
     e8a:	87 b1       	in	r24, 0x07	; 7
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	82 60       	ori	r24, 0x02	; 2
     e90:	83 7f       	andi	r24, 0xF3	; 243
     e92:	87 b9       	out	0x07, r24	; 7
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     e94:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(_channel)
		{
			case ADC_CHANNEL_ZERO: ADC_CHANNEL_ZERO(); break;
			case ADC_CHANNEL_ONE: ADC_CHANNEL_ONE(); break;
			case ADC_CHANNEL_TWO: ADC_CHANNEL_TWO(); break;
     e96:	08 95       	ret
			case ADC_CHANNEL_THREE: ADC_CHANNEL_THREE(); break;
     e98:	87 b1       	in	r24, 0x07	; 7
     e9a:	83 60       	ori	r24, 0x03	; 3
     e9c:	83 7f       	andi	r24, 0xF3	; 243
     e9e:	87 b9       	out	0x07, r24	; 7
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
		switch(_channel)
		{
			case ADC_CHANNEL_ZERO: ADC_CHANNEL_ZERO(); break;
			case ADC_CHANNEL_ONE: ADC_CHANNEL_ONE(); break;
			case ADC_CHANNEL_TWO: ADC_CHANNEL_TWO(); break;
			case ADC_CHANNEL_THREE: ADC_CHANNEL_THREE(); break;
     ea2:	08 95       	ret
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
     ea4:	87 b1       	in	r24, 0x07	; 7
     ea6:	8c 7f       	andi	r24, 0xFC	; 252
     ea8:	84 60       	ori	r24, 0x04	; 4
     eaa:	87 7f       	andi	r24, 0xF7	; 247
     eac:	87 b9       	out	0x07, r24	; 7
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     eae:	81 e0       	ldi	r24, 0x01	; 1
		{
			case ADC_CHANNEL_ZERO: ADC_CHANNEL_ZERO(); break;
			case ADC_CHANNEL_ONE: ADC_CHANNEL_ONE(); break;
			case ADC_CHANNEL_TWO: ADC_CHANNEL_TWO(); break;
			case ADC_CHANNEL_THREE: ADC_CHANNEL_THREE(); break;
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
     eb0:	08 95       	ret
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
     eb2:	87 b1       	in	r24, 0x07	; 7
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	8d 7f       	andi	r24, 0xFD	; 253
     eb8:	84 60       	ori	r24, 0x04	; 4
     eba:	87 7f       	andi	r24, 0xF7	; 247
     ebc:	87 b9       	out	0x07, r24	; 7
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
			case ADC_CHANNEL_ZERO: ADC_CHANNEL_ZERO(); break;
			case ADC_CHANNEL_ONE: ADC_CHANNEL_ONE(); break;
			case ADC_CHANNEL_TWO: ADC_CHANNEL_TWO(); break;
			case ADC_CHANNEL_THREE: ADC_CHANNEL_THREE(); break;
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
     ec0:	08 95       	ret
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
     ec2:	87 b1       	in	r24, 0x07	; 7
     ec4:	8e 7f       	andi	r24, 0xFE	; 254
     ec6:	86 60       	ori	r24, 0x06	; 6
     ec8:	87 7f       	andi	r24, 0xF7	; 247
     eca:	87 b9       	out	0x07, r24	; 7
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
			case ADC_CHANNEL_ONE: ADC_CHANNEL_ONE(); break;
			case ADC_CHANNEL_TWO: ADC_CHANNEL_TWO(); break;
			case ADC_CHANNEL_THREE: ADC_CHANNEL_THREE(); break;
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
     ece:	08 95       	ret
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
     ed0:	87 b1       	in	r24, 0x07	; 7
     ed2:	87 60       	ori	r24, 0x07	; 7
     ed4:	87 7f       	andi	r24, 0xF7	; 247
     ed6:	87 b9       	out	0x07, r24	; 7
		}
		ret = E_OK;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
			case ADC_CHANNEL_TWO: ADC_CHANNEL_TWO(); break;
			case ADC_CHANNEL_THREE: ADC_CHANNEL_THREE(); break;
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
     eda:	08 95       	ret
{
	Std_ReturnType ret = E_NOT_OK;

	if(NULL == _adc)
	{
		ret = E_NOT_OK;
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	08 95       	ret
			case ADC_CHANNEL_FOUR: ADC_CHANNEL_FOUR(); break;
			case ADC_CHANNEL_FIVE: ADC_CHANNEL_FIVE(); break;
			case ADC_CHANNEL_SIX: ADC_CHANNEL_SIX(); break;
			case ADC_CHANNEL_SEVEN: ADC_CHANNEL_SEVEN(); break;
		}
		ret = E_OK;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ret;
}
     ee2:	08 95       	ret

00000ee4 <ADC_StartConversion>:
Std_ReturnType ADC_StartConversion(const ST_ADC_CFG_t *_adc)
{
	Std_ReturnType ret = E_NOT_OK;

	if(NULL == _adc)
     ee4:	89 2b       	or	r24, r25
     ee6:	29 f0       	breq	.+10     	; 0xef2 <ADC_StartConversion+0xe>
		ret = E_NOT_OK;
	}
	else
	{

		ADC_START_CONVERSION();
     ee8:	86 b1       	in	r24, 0x06	; 6
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	86 b9       	out	0x06, r24	; 6
		ret = E_OK;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret
{
	Std_ReturnType ret = E_NOT_OK;

	if(NULL == _adc)
	{
		ret = E_NOT_OK;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
		ADC_START_CONVERSION();
		ret = E_OK;
	}

	return ret;
}
     ef4:	08 95       	ret

00000ef6 <ADC_GetConversionResult>:
Std_ReturnType ADC_GetConversionResult(const ST_ADC_CFG_t *_adc , Uint16_t *_ConversionResult)
{
     ef6:	fc 01       	movw	r30, r24
	Std_ReturnType ret = E_NOT_OK;
	volatile Uint16_t temp;

	if(NULL == _adc || NULL == _ConversionResult)
     ef8:	89 2b       	or	r24, r25
     efa:	71 f1       	breq	.+92     	; 0xf58 <ADC_GetConversionResult+0x62>
     efc:	61 15       	cp	r22, r1
     efe:	71 05       	cpc	r23, r1
     f00:	69 f1       	breq	.+90     	; 0xf5c <ADC_GetConversionResult+0x66>
		ret = E_NOT_OK;
	}
	else
	{
		
		while(GET_BIT(ADCSRA_REG,ADCSRA_REG_ADIF_BIT) == 0)
     f02:	96 b1       	in	r25, 0x06	; 6
     f04:	94 ff       	sbrs	r25, 4
     f06:	fd cf       	rjmp	.-6      	; 0xf02 <ADC_GetConversionResult+0xc>
			//temp = ADCL_REG + (ADCH_REG << 8);
			//if (temp)
			 //*_ConversionResult = temp;
		}

		CLEAR_BIT(ADCSRA_REG,ADCSRA_REG_ADIF_BIT);
     f08:	9f 7e       	andi	r25, 0xEF	; 239
     f0a:	96 b9       	out	0x06, r25	; 6

		switch(_adc->resultAdjust)
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	88 23       	and	r24, r24
     f10:	19 f0       	breq	.+6      	; 0xf18 <ADC_GetConversionResult+0x22>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	69 f0       	breq	.+26     	; 0xf30 <ADC_GetConversionResult+0x3a>
     f16:	24 c0       	rjmp	.+72     	; 0xf60 <ADC_GetConversionResult+0x6a>
		{
			case ADC_RIGHT_ADJUST_RESULT : *_ConversionResult = ADCL_REG + (ADCH_REG << 8); break;
     f18:	24 b1       	in	r18, 0x04	; 4
     f1a:	85 b1       	in	r24, 0x05	; 5
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	98 2f       	mov	r25, r24
     f20:	88 27       	eor	r24, r24
     f22:	82 0f       	add	r24, r18
     f24:	91 1d       	adc	r25, r1
     f26:	fb 01       	movw	r30, r22
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	80 83       	st	Z, r24
			case ADC_LEFT_ADJUST_RESULT :  *_ConversionResult = (Uint16_t)((ADCL_REG + (ADCH_REG << 8))>>6); break;
		}


		ret = E_OK;
     f2c:	81 e0       	ldi	r24, 0x01	; 1

		CLEAR_BIT(ADCSRA_REG,ADCSRA_REG_ADIF_BIT);

		switch(_adc->resultAdjust)
		{
			case ADC_RIGHT_ADJUST_RESULT : *_ConversionResult = ADCL_REG + (ADCH_REG << 8); break;
     f2e:	08 95       	ret
			case ADC_LEFT_ADJUST_RESULT :  *_ConversionResult = (Uint16_t)((ADCL_REG + (ADCH_REG << 8))>>6); break;
     f30:	24 b1       	in	r18, 0x04	; 4
     f32:	85 b1       	in	r24, 0x05	; 5
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	98 2f       	mov	r25, r24
     f38:	88 27       	eor	r24, r24
     f3a:	82 0f       	add	r24, r18
     f3c:	91 1d       	adc	r25, r1
     f3e:	08 2e       	mov	r0, r24
     f40:	89 2f       	mov	r24, r25
     f42:	00 0c       	add	r0, r0
     f44:	88 1f       	adc	r24, r24
     f46:	99 0b       	sbc	r25, r25
     f48:	00 0c       	add	r0, r0
     f4a:	88 1f       	adc	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	fb 01       	movw	r30, r22
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
		}


		ret = E_OK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
		CLEAR_BIT(ADCSRA_REG,ADCSRA_REG_ADIF_BIT);

		switch(_adc->resultAdjust)
		{
			case ADC_RIGHT_ADJUST_RESULT : *_ConversionResult = ADCL_REG + (ADCH_REG << 8); break;
			case ADC_LEFT_ADJUST_RESULT :  *_ConversionResult = (Uint16_t)((ADCL_REG + (ADCH_REG << 8))>>6); break;
     f56:	08 95       	ret
	Std_ReturnType ret = E_NOT_OK;
	volatile Uint16_t temp;

	if(NULL == _adc || NULL == _ConversionResult)
	{
		ret = E_NOT_OK;
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	08 95       	ret
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 95       	ret
			case ADC_RIGHT_ADJUST_RESULT : *_ConversionResult = ADCL_REG + (ADCH_REG << 8); break;
			case ADC_LEFT_ADJUST_RESULT :  *_ConversionResult = (Uint16_t)((ADCL_REG + (ADCH_REG << 8))>>6); break;
		}


		ret = E_OK;
     f60:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ret;
}
     f62:	08 95       	ret

00000f64 <ADC_Conversion>:
Std_ReturnType ADC_Conversion(const ST_ADC_CFG_t *_adc , Uint16_t *_ConversionResult , EN_ADC_CHANNEL_SELECTION_t _channel)
{
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
	Std_ReturnType ret = E_NOT_OK;

	if(NULL == _adc || NULL == _ConversionResult)
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	a9 f0       	breq	.+42     	; 0xf9c <ADC_Conversion+0x38>
     f72:	61 15       	cp	r22, r1
     f74:	71 05       	cpc	r23, r1
     f76:	a1 f0       	breq	.+40     	; 0xfa0 <ADC_Conversion+0x3c>
     f78:	f4 2e       	mov	r15, r20
     f7a:	8b 01       	movw	r16, r22
     f7c:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	}
	else
	{

		ADC_Init(_adc);
     f7e:	0e 94 be 06 	call	0xd7c	; 0xd7c <ADC_Init>
		ADC_SetChannel(_adc,_channel);
     f82:	6f 2d       	mov	r22, r15
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 2e 07 	call	0xe5c	; 0xe5c <ADC_SetChannel>
		ADC_StartConversion(_adc);
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 72 07 	call	0xee4	; 0xee4 <ADC_StartConversion>
		ADC_GetConversionResult(_adc,_ConversionResult);
     f90:	b8 01       	movw	r22, r16
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 7b 07 	call	0xef6	; 0xef6 <ADC_GetConversionResult>

		ret = E_OK;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <ADC_Conversion+0x3e>
{
	Std_ReturnType ret = E_NOT_OK;

	if(NULL == _adc || NULL == _ConversionResult)
	{
		ret = E_NOT_OK;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <ADC_Conversion+0x3e>
     fa0:	80 e0       	ldi	r24, 0x00	; 0

		ret = E_OK;
	}

	return ret;
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	08 95       	ret

00000fae <DIO_s8SETPinDir>:
     fae:	80 32       	cpi	r24, 0x20	; 32
     fb0:	c0 f5       	brcc	.+112    	; 0x1022 <DIO_s8SETPinDir+0x74>
     fb2:	62 30       	cpi	r22, 0x02	; 2
     fb4:	c0 f5       	brcc	.+112    	; 0x1026 <DIO_s8SETPinDir+0x78>
     fb6:	e8 2f       	mov	r30, r24
     fb8:	e6 95       	lsr	r30
     fba:	e6 95       	lsr	r30
     fbc:	e6 95       	lsr	r30
     fbe:	87 70       	andi	r24, 0x07	; 7
     fc0:	61 11       	cpse	r22, r1
     fc2:	17 c0       	rjmp	.+46     	; 0xff2 <DIO_s8SETPinDir+0x44>
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	e4 58       	subi	r30, 0x84	; 132
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	01 90       	ld	r0, Z+
     fd0:	f0 81       	ld	r31, Z
     fd2:	e0 2d       	mov	r30, r0
     fd4:	40 81       	ld	r20, Z
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	b9 01       	movw	r22, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_s8SETPinDir+0x34>
     fde:	66 0f       	add	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	8a 95       	dec	r24
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_s8SETPinDir+0x30>
     fe6:	cb 01       	movw	r24, r22
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	80 83       	st	Z, r24
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	08 95       	ret
     ff2:	61 30       	cpi	r22, 0x01	; 1
     ff4:	d1 f4       	brne	.+52     	; 0x102a <DIO_s8SETPinDir+0x7c>
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	e4 58       	subi	r30, 0x84	; 132
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	01 90       	ld	r0, Z+
    1002:	f0 81       	ld	r31, Z
    1004:	e0 2d       	mov	r30, r0
    1006:	40 81       	ld	r20, Z
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	b9 01       	movw	r22, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_s8SETPinDir+0x66>
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_s8SETPinDir+0x62>
    1018:	cb 01       	movw	r24, r22
    101a:	84 2b       	or	r24, r20
    101c:	80 83       	st	Z, r24
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	08 95       	ret
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	08 95       	ret
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	08 95       	ret
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	08 95       	ret

0000102e <DIO_s8SETPinVal>:
    102e:	80 32       	cpi	r24, 0x20	; 32
    1030:	c0 f5       	brcc	.+112    	; 0x10a2 <DIO_s8SETPinVal+0x74>
    1032:	62 30       	cpi	r22, 0x02	; 2
    1034:	c0 f5       	brcc	.+112    	; 0x10a6 <DIO_s8SETPinVal+0x78>
    1036:	e8 2f       	mov	r30, r24
    1038:	e6 95       	lsr	r30
    103a:	e6 95       	lsr	r30
    103c:	e6 95       	lsr	r30
    103e:	87 70       	andi	r24, 0x07	; 7
    1040:	61 11       	cpse	r22, r1
    1042:	17 c0       	rjmp	.+46     	; 0x1072 <DIO_s8SETPinVal+0x44>
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ec 57       	subi	r30, 0x7C	; 124
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	01 90       	ld	r0, Z+
    1050:	f0 81       	ld	r31, Z
    1052:	e0 2d       	mov	r30, r0
    1054:	40 81       	ld	r20, Z
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	b9 01       	movw	r22, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_s8SETPinVal+0x34>
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	8a 95       	dec	r24
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_s8SETPinVal+0x30>
    1066:	cb 01       	movw	r24, r22
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	80 83       	st	Z, r24
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	08 95       	ret
    1072:	61 30       	cpi	r22, 0x01	; 1
    1074:	d1 f4       	brne	.+52     	; 0x10aa <DIO_s8SETPinVal+0x7c>
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	ec 57       	subi	r30, 0x7C	; 124
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	01 90       	ld	r0, Z+
    1082:	f0 81       	ld	r31, Z
    1084:	e0 2d       	mov	r30, r0
    1086:	40 81       	ld	r20, Z
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_s8SETPinVal+0x66>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_s8SETPinVal+0x62>
    1098:	cb 01       	movw	r24, r22
    109a:	84 2b       	or	r24, r20
    109c:	80 83       	st	Z, r24
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	08 95       	ret
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	08 95       	ret
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	08 95       	ret
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret

000010ae <DIO_s8GETPinVal>:
    10ae:	80 32       	cpi	r24, 0x20	; 32
    10b0:	d8 f4       	brcc	.+54     	; 0x10e8 <DIO_s8GETPinVal+0x3a>
    10b2:	e8 2f       	mov	r30, r24
    10b4:	e6 95       	lsr	r30
    10b6:	e6 95       	lsr	r30
    10b8:	e6 95       	lsr	r30
    10ba:	87 70       	andi	r24, 0x07	; 7
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	ec 58       	subi	r30, 0x8C	; 140
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	01 90       	ld	r0, Z+
    10c8:	f0 81       	ld	r31, Z
    10ca:	e0 2d       	mov	r30, r0
    10cc:	20 81       	ld	r18, Z
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_s8GETPinVal+0x2a>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_s8GETPinVal+0x26>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	fb 01       	movw	r30, r22
    10e2:	80 83       	st	Z, r24
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	08 95       	ret
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	08 95       	ret

000010ec <TIM0_voidInit>:
/*========================= Function Implementation ========================*/
en_TIMErrorState_t TIM0_voidInit(en_TIMMode_t u8_a_Mode)
{
	Uchar8_t u8_l_T0Mode;
	
	switch(u8_a_Mode)
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	61 f0       	breq	.+24     	; 0x1108 <TIM0_voidInit+0x1c>
    10f0:	28 f0       	brcs	.+10     	; 0x10fc <TIM0_voidInit+0x10>
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	29 f0       	breq	.+10     	; 0x1100 <TIM0_voidInit+0x14>
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	29 f0       	breq	.+10     	; 0x1104 <TIM0_voidInit+0x18>
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <TIM0_voidInit+0x2e>
	{
		case NormalMode:   u8_l_T0Mode = TIM0_NORMAL;	 break;
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <TIM0_voidInit+0x1e>
		case PWM_Mode:     u8_l_T0Mode = TIM0_PWM;	     break;
		case CTC_Mode:	   u8_l_T0Mode = TIM0_CTC;		 break;
    1100:	28 e0       	ldi	r18, 0x08	; 8
    1102:	03 c0       	rjmp	.+6      	; 0x110a <TIM0_voidInit+0x1e>
		case FastPWM_Mode: u8_l_T0Mode = TIM0_FAST_PWM; break;
    1104:	28 e4       	ldi	r18, 0x48	; 72
    1106:	01 c0       	rjmp	.+2      	; 0x110a <TIM0_voidInit+0x1e>
	Uchar8_t u8_l_T0Mode;
	
	switch(u8_a_Mode)
	{
		case NormalMode:   u8_l_T0Mode = TIM0_NORMAL;	 break;
		case PWM_Mode:     u8_l_T0Mode = TIM0_PWM;	     break;
    1108:	20 e4       	ldi	r18, 0x40	; 64
		case FastPWM_Mode: u8_l_T0Mode = TIM0_FAST_PWM; break;
		default: return TIM_NOK;
	}
	
	/* Clear the timer0 mode bit */
	TCCR0 &= TIMER0_MODE_MASK;
    110a:	93 b7       	in	r25, 0x33	; 51
    110c:	97 7b       	andi	r25, 0xB7	; 183
    110e:	93 bf       	out	0x33, r25	; 51
	/* Set the bits to the given value */
	TCCR0 |= u8_l_T0Mode;
    1110:	83 b7       	in	r24, 0x33	; 51
    1112:	82 2b       	or	r24, r18
    1114:	83 bf       	out	0x33, r24	; 51
	
	return TIM_OK;
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	08 95       	ret
	{
		case NormalMode:   u8_l_T0Mode = TIM0_NORMAL;	 break;
		case PWM_Mode:     u8_l_T0Mode = TIM0_PWM;	     break;
		case CTC_Mode:	   u8_l_T0Mode = TIM0_CTC;		 break;
		case FastPWM_Mode: u8_l_T0Mode = TIM0_FAST_PWM; break;
		default: return TIM_NOK;
    111a:	81 e0       	ldi	r24, 0x01	; 1
	TCCR0 &= TIMER0_MODE_MASK;
	/* Set the bits to the given value */
	TCCR0 |= u8_l_T0Mode;
	
	return TIM_OK;
}
    111c:	08 95       	ret

0000111e <TIM0_Start>:
en_TIMErrorState_t TIM0_Start(en_TIM_CLK_SELECT_t u8_a_prescaler)
{
	en_TIMErrorState_t u8_l_ErrorState = TIM_OK;
	
	/* Check that prescaler is valid */
	if(u8_a_prescaler > TIM_NO_CLOCK && u8_a_prescaler <= TIM_EXTERNAL_RISING_EDGE)
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	98 0f       	add	r25, r24
    1122:	97 30       	cpi	r25, 0x07	; 7
    1124:	40 f4       	brcc	.+16     	; 0x1136 <TIM0_Start+0x18>
	{
		/* Clear the prescaler bits */
		TCCR0 &= TIM0_CLK_MASK;
    1126:	93 b7       	in	r25, 0x33	; 51
    1128:	98 7f       	andi	r25, 0xF8	; 248
    112a:	93 bf       	out	0x33, r25	; 51
		/* Set prescaler value */
		TCCR0 |= u8_a_prescaler;
    112c:	93 b7       	in	r25, 0x33	; 51
    112e:	89 2b       	or	r24, r25
    1130:	83 bf       	out	0x33, r24	; 51
	return TIM_OK;
}

en_TIMErrorState_t TIM0_Start(en_TIM_CLK_SELECT_t u8_a_prescaler)
{
	en_TIMErrorState_t u8_l_ErrorState = TIM_OK;
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	08 95       	ret
		/* Set prescaler value */
		TCCR0 |= u8_a_prescaler;
	}
	else
	{
		u8_l_ErrorState = TIM_NOK;
    1136:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return u8_l_ErrorState;
}
    1138:	08 95       	ret

0000113a <TIM0_Stop>:

void TIM0_Stop()
{
	/* Clear the prescaler bits */
	TCCR0 &= TIM0_CLK_MASK;
    113a:	83 b7       	in	r24, 0x33	; 51
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1140:	12 be       	out	0x32, r1	; 50
	CLEAR_BIT(TIFR, TIFR_TOV0);
    1142:	88 b7       	in	r24, 0x38	; 56
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	88 bf       	out	0x38, r24	; 56
    1148:	08 95       	ret

0000114a <TIM0_SetValue>:
}

void TIM0_SetValue(Uchar8_t u8_a_startValue)
{
	TCNT0 = u8_a_startValue;
    114a:	82 bf       	out	0x32, r24	; 50
    114c:	08 95       	ret

0000114e <TIM0_GetOVF>:
* \param u8_a_FlagValue reference to a variable to store flag value
*
* \return en_TIMErrorState_t
*/
en_TIMErrorState_t TIM0_GetOVF(Uchar8_t* u8_a_FlagValue)
{
    114e:	fc 01       	movw	r30, r24
	if(u8_a_FlagValue != NULL)
    1150:	89 2b       	or	r24, r25
    1152:	29 f0       	breq	.+10     	; 0x115e <TIM0_GetOVF+0x10>
	{
		*u8_a_FlagValue = GET_BIT(TIFR, TIFR_TOV0);
    1154:	98 b7       	in	r25, 0x38	; 56
    1156:	91 70       	andi	r25, 0x01	; 1
    1158:	90 83       	st	Z, r25
	else
	{
		return TIM_NOK;
	}
	
	return TIM_OK;
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	08 95       	ret
	{
		*u8_a_FlagValue = GET_BIT(TIFR, TIFR_TOV0);
	}
	else
	{
		return TIM_NOK;
    115e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return TIM_OK;
}
    1160:	08 95       	ret

00001162 <TIM0_ClearOVF>:
 *
 * \return void
 */
void TIM0_ClearOVF(void)
{
	SET_BIT(TIFR, TIFR_TOV0);
    1162:	88 b7       	in	r24, 0x38	; 56
    1164:	81 60       	ori	r24, 0x01	; 1
    1166:	88 bf       	out	0x38, r24	; 56
    1168:	08 95       	ret

0000116a <TIM0_GetState>:
*
* \return en_TIMErrorState_t
*/
en_TIMErrorState_t TIM0_GetState(en_TIMState_t* u8_a_State)
{
	if(u8_a_State != NULL)
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <TIM0_GetState+0x1c>
	{
		if (TCCR0 & 0b00000111 != 0) 
    116e:	03 b6       	in	r0, 0x33	; 51
    1170:	00 fe       	sbrs	r0, 0
    1172:	05 c0       	rjmp	.+10     	; 0x117e <TIM0_GetState+0x14>
		{
			*u8_a_State = TIM0_RUNNING;
    1174:	21 e0       	ldi	r18, 0x01	; 1
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
	else
	{
		return TIM_NOK;
	}
	
	return TIM_OK;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	08 95       	ret
		{
			*u8_a_State = TIM0_RUNNING;
		}
		else
		{
			*u8_a_State = TIM0_STOPPED;
    117e:	fc 01       	movw	r30, r24
    1180:	10 82       	st	Z, r1
	else
	{
		return TIM_NOK;
	}
	
	return TIM_OK;
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret
			*u8_a_State = TIM0_STOPPED;
		}
	}
	else
	{
		return TIM_NOK;
    1186:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return TIM_OK;
}
    1188:	08 95       	ret

0000118a <TIM0_EnableInterrupt>:


void TIM0_EnableInterrupt(void)
{
	SET_BIT(TIMSK, TIMSK_TOIE0);
    118a:	89 b7       	in	r24, 0x39	; 57
    118c:	81 60       	ori	r24, 0x01	; 1
    118e:	89 bf       	out	0x39, r24	; 57
    1190:	08 95       	ret

00001192 <__cmpsf2>:
    1192:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_cmp>
    1196:	08 f4       	brcc	.+2      	; 0x119a <__cmpsf2+0x8>
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	08 95       	ret

0000119c <__divsf3>:
    119c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3x>
    11a0:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_round>
    11a4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_pscB>
    11a8:	58 f0       	brcs	.+22     	; 0x11c0 <__divsf3+0x24>
    11aa:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__fp_pscA>
    11ae:	40 f0       	brcs	.+16     	; 0x11c0 <__divsf3+0x24>
    11b0:	29 f4       	brne	.+10     	; 0x11bc <__divsf3+0x20>
    11b2:	5f 3f       	cpi	r21, 0xFF	; 255
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <__divsf3+0x24>
    11b6:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_inf>
    11ba:	51 11       	cpse	r21, r1
    11bc:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_szero>
    11c0:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_nan>

000011c4 <__divsf3x>:
    11c4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_split3>
    11c8:	68 f3       	brcs	.-38     	; 0x11a4 <__divsf3+0x8>

000011ca <__divsf3_pse>:
    11ca:	99 23       	and	r25, r25
    11cc:	b1 f3       	breq	.-20     	; 0x11ba <__divsf3+0x1e>
    11ce:	55 23       	and	r21, r21
    11d0:	91 f3       	breq	.-28     	; 0x11b6 <__divsf3+0x1a>
    11d2:	95 1b       	sub	r25, r21
    11d4:	55 0b       	sbc	r21, r21
    11d6:	bb 27       	eor	r27, r27
    11d8:	aa 27       	eor	r26, r26
    11da:	62 17       	cp	r22, r18
    11dc:	73 07       	cpc	r23, r19
    11de:	84 07       	cpc	r24, r20
    11e0:	38 f0       	brcs	.+14     	; 0x11f0 <__divsf3_pse+0x26>
    11e2:	9f 5f       	subi	r25, 0xFF	; 255
    11e4:	5f 4f       	sbci	r21, 0xFF	; 255
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	44 1f       	adc	r20, r20
    11ec:	aa 1f       	adc	r26, r26
    11ee:	a9 f3       	breq	.-22     	; 0x11da <__divsf3_pse+0x10>
    11f0:	35 d0       	rcall	.+106    	; 0x125c <__divsf3_pse+0x92>
    11f2:	0e 2e       	mov	r0, r30
    11f4:	3a f0       	brmi	.+14     	; 0x1204 <__divsf3_pse+0x3a>
    11f6:	e0 e8       	ldi	r30, 0x80	; 128
    11f8:	32 d0       	rcall	.+100    	; 0x125e <__divsf3_pse+0x94>
    11fa:	91 50       	subi	r25, 0x01	; 1
    11fc:	50 40       	sbci	r21, 0x00	; 0
    11fe:	e6 95       	lsr	r30
    1200:	00 1c       	adc	r0, r0
    1202:	ca f7       	brpl	.-14     	; 0x11f6 <__divsf3_pse+0x2c>
    1204:	2b d0       	rcall	.+86     	; 0x125c <__divsf3_pse+0x92>
    1206:	fe 2f       	mov	r31, r30
    1208:	29 d0       	rcall	.+82     	; 0x125c <__divsf3_pse+0x92>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	bb 1f       	adc	r27, r27
    1212:	26 17       	cp	r18, r22
    1214:	37 07       	cpc	r19, r23
    1216:	48 07       	cpc	r20, r24
    1218:	ab 07       	cpc	r26, r27
    121a:	b0 e8       	ldi	r27, 0x80	; 128
    121c:	09 f0       	breq	.+2      	; 0x1220 <__divsf3_pse+0x56>
    121e:	bb 0b       	sbc	r27, r27
    1220:	80 2d       	mov	r24, r0
    1222:	bf 01       	movw	r22, r30
    1224:	ff 27       	eor	r31, r31
    1226:	93 58       	subi	r25, 0x83	; 131
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	3a f0       	brmi	.+14     	; 0x123a <__divsf3_pse+0x70>
    122c:	9e 3f       	cpi	r25, 0xFE	; 254
    122e:	51 05       	cpc	r21, r1
    1230:	78 f0       	brcs	.+30     	; 0x1250 <__divsf3_pse+0x86>
    1232:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_inf>
    1236:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_szero>
    123a:	5f 3f       	cpi	r21, 0xFF	; 255
    123c:	e4 f3       	brlt	.-8      	; 0x1236 <__divsf3_pse+0x6c>
    123e:	98 3e       	cpi	r25, 0xE8	; 232
    1240:	d4 f3       	brlt	.-12     	; 0x1236 <__divsf3_pse+0x6c>
    1242:	86 95       	lsr	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	b7 95       	ror	r27
    124a:	f7 95       	ror	r31
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__divsf3_pse+0x78>
    1250:	88 0f       	add	r24, r24
    1252:	91 1d       	adc	r25, r1
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret
    125c:	e1 e0       	ldi	r30, 0x01	; 1
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	bb 1f       	adc	r27, r27
    1266:	62 17       	cp	r22, r18
    1268:	73 07       	cpc	r23, r19
    126a:	84 07       	cpc	r24, r20
    126c:	ba 07       	cpc	r27, r26
    126e:	20 f0       	brcs	.+8      	; 0x1278 <__divsf3_pse+0xae>
    1270:	62 1b       	sub	r22, r18
    1272:	73 0b       	sbc	r23, r19
    1274:	84 0b       	sbc	r24, r20
    1276:	ba 0b       	sbc	r27, r26
    1278:	ee 1f       	adc	r30, r30
    127a:	88 f7       	brcc	.-30     	; 0x125e <__divsf3_pse+0x94>
    127c:	e0 95       	com	r30
    127e:	08 95       	ret

00001280 <__fixunssfsi>:
    1280:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_splitA>
    1284:	88 f0       	brcs	.+34     	; 0x12a8 <__fixunssfsi+0x28>
    1286:	9f 57       	subi	r25, 0x7F	; 127
    1288:	98 f0       	brcs	.+38     	; 0x12b0 <__fixunssfsi+0x30>
    128a:	b9 2f       	mov	r27, r25
    128c:	99 27       	eor	r25, r25
    128e:	b7 51       	subi	r27, 0x17	; 23
    1290:	b0 f0       	brcs	.+44     	; 0x12be <__fixunssfsi+0x3e>
    1292:	e1 f0       	breq	.+56     	; 0x12cc <__fixunssfsi+0x4c>
    1294:	66 0f       	add	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	88 1f       	adc	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	1a f0       	brmi	.+6      	; 0x12a4 <__fixunssfsi+0x24>
    129e:	ba 95       	dec	r27
    12a0:	c9 f7       	brne	.-14     	; 0x1294 <__fixunssfsi+0x14>
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <__fixunssfsi+0x4c>
    12a4:	b1 30       	cpi	r27, 0x01	; 1
    12a6:	91 f0       	breq	.+36     	; 0x12cc <__fixunssfsi+0x4c>
    12a8:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fp_zero>
    12ac:	b1 e0       	ldi	r27, 0x01	; 1
    12ae:	08 95       	ret
    12b0:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_zero>
    12b4:	67 2f       	mov	r22, r23
    12b6:	78 2f       	mov	r23, r24
    12b8:	88 27       	eor	r24, r24
    12ba:	b8 5f       	subi	r27, 0xF8	; 248
    12bc:	39 f0       	breq	.+14     	; 0x12cc <__fixunssfsi+0x4c>
    12be:	b9 3f       	cpi	r27, 0xF9	; 249
    12c0:	cc f3       	brlt	.-14     	; 0x12b4 <__fixunssfsi+0x34>
    12c2:	86 95       	lsr	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b3 95       	inc	r27
    12ca:	d9 f7       	brne	.-10     	; 0x12c2 <__fixunssfsi+0x42>
    12cc:	3e f4       	brtc	.+14     	; 0x12dc <__fixunssfsi+0x5c>
    12ce:	90 95       	com	r25
    12d0:	80 95       	com	r24
    12d2:	70 95       	com	r23
    12d4:	61 95       	neg	r22
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	8f 4f       	sbci	r24, 0xFF	; 255
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	08 95       	ret

000012de <__floatunsisf>:
    12de:	e8 94       	clt
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <__floatsisf+0x12>

000012e2 <__floatsisf>:
    12e2:	97 fb       	bst	r25, 7
    12e4:	3e f4       	brtc	.+14     	; 0x12f4 <__floatsisf+0x12>
    12e6:	90 95       	com	r25
    12e8:	80 95       	com	r24
    12ea:	70 95       	com	r23
    12ec:	61 95       	neg	r22
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	8f 4f       	sbci	r24, 0xFF	; 255
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	99 23       	and	r25, r25
    12f6:	a9 f0       	breq	.+42     	; 0x1322 <__floatsisf+0x40>
    12f8:	f9 2f       	mov	r31, r25
    12fa:	96 e9       	ldi	r25, 0x96	; 150
    12fc:	bb 27       	eor	r27, r27
    12fe:	93 95       	inc	r25
    1300:	f6 95       	lsr	r31
    1302:	87 95       	ror	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b7 95       	ror	r27
    130a:	f1 11       	cpse	r31, r1
    130c:	f8 cf       	rjmp	.-16     	; 0x12fe <__floatsisf+0x1c>
    130e:	fa f4       	brpl	.+62     	; 0x134e <__floatsisf+0x6c>
    1310:	bb 0f       	add	r27, r27
    1312:	11 f4       	brne	.+4      	; 0x1318 <__floatsisf+0x36>
    1314:	60 ff       	sbrs	r22, 0
    1316:	1b c0       	rjmp	.+54     	; 0x134e <__floatsisf+0x6c>
    1318:	6f 5f       	subi	r22, 0xFF	; 255
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	8f 4f       	sbci	r24, 0xFF	; 255
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	16 c0       	rjmp	.+44     	; 0x134e <__floatsisf+0x6c>
    1322:	88 23       	and	r24, r24
    1324:	11 f0       	breq	.+4      	; 0x132a <__floatsisf+0x48>
    1326:	96 e9       	ldi	r25, 0x96	; 150
    1328:	11 c0       	rjmp	.+34     	; 0x134c <__floatsisf+0x6a>
    132a:	77 23       	and	r23, r23
    132c:	21 f0       	breq	.+8      	; 0x1336 <__floatsisf+0x54>
    132e:	9e e8       	ldi	r25, 0x8E	; 142
    1330:	87 2f       	mov	r24, r23
    1332:	76 2f       	mov	r23, r22
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <__floatsisf+0x5e>
    1336:	66 23       	and	r22, r22
    1338:	71 f0       	breq	.+28     	; 0x1356 <__floatsisf+0x74>
    133a:	96 e8       	ldi	r25, 0x86	; 134
    133c:	86 2f       	mov	r24, r22
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	2a f0       	brmi	.+10     	; 0x134e <__floatsisf+0x6c>
    1344:	9a 95       	dec	r25
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	da f7       	brpl	.-10     	; 0x1344 <__floatsisf+0x62>
    134e:	88 0f       	add	r24, r24
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <__fp_cmp>:
    1358:	99 0f       	add	r25, r25
    135a:	00 08       	sbc	r0, r0
    135c:	55 0f       	add	r21, r21
    135e:	aa 0b       	sbc	r26, r26
    1360:	e0 e8       	ldi	r30, 0x80	; 128
    1362:	fe ef       	ldi	r31, 0xFE	; 254
    1364:	16 16       	cp	r1, r22
    1366:	17 06       	cpc	r1, r23
    1368:	e8 07       	cpc	r30, r24
    136a:	f9 07       	cpc	r31, r25
    136c:	c0 f0       	brcs	.+48     	; 0x139e <__fp_cmp+0x46>
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	e4 07       	cpc	r30, r20
    1374:	f5 07       	cpc	r31, r21
    1376:	98 f0       	brcs	.+38     	; 0x139e <__fp_cmp+0x46>
    1378:	62 1b       	sub	r22, r18
    137a:	73 0b       	sbc	r23, r19
    137c:	84 0b       	sbc	r24, r20
    137e:	95 0b       	sbc	r25, r21
    1380:	39 f4       	brne	.+14     	; 0x1390 <__fp_cmp+0x38>
    1382:	0a 26       	eor	r0, r26
    1384:	61 f0       	breq	.+24     	; 0x139e <__fp_cmp+0x46>
    1386:	23 2b       	or	r18, r19
    1388:	24 2b       	or	r18, r20
    138a:	25 2b       	or	r18, r21
    138c:	21 f4       	brne	.+8      	; 0x1396 <__fp_cmp+0x3e>
    138e:	08 95       	ret
    1390:	0a 26       	eor	r0, r26
    1392:	09 f4       	brne	.+2      	; 0x1396 <__fp_cmp+0x3e>
    1394:	a1 40       	sbci	r26, 0x01	; 1
    1396:	a6 95       	lsr	r26
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	81 1d       	adc	r24, r1
    139c:	81 1d       	adc	r24, r1
    139e:	08 95       	ret

000013a0 <__fp_inf>:
    13a0:	97 f9       	bld	r25, 7
    13a2:	9f 67       	ori	r25, 0x7F	; 127
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	08 95       	ret

000013ac <__fp_nan>:
    13ac:	9f ef       	ldi	r25, 0xFF	; 255
    13ae:	80 ec       	ldi	r24, 0xC0	; 192
    13b0:	08 95       	ret

000013b2 <__fp_pscA>:
    13b2:	00 24       	eor	r0, r0
    13b4:	0a 94       	dec	r0
    13b6:	16 16       	cp	r1, r22
    13b8:	17 06       	cpc	r1, r23
    13ba:	18 06       	cpc	r1, r24
    13bc:	09 06       	cpc	r0, r25
    13be:	08 95       	ret

000013c0 <__fp_pscB>:
    13c0:	00 24       	eor	r0, r0
    13c2:	0a 94       	dec	r0
    13c4:	12 16       	cp	r1, r18
    13c6:	13 06       	cpc	r1, r19
    13c8:	14 06       	cpc	r1, r20
    13ca:	05 06       	cpc	r0, r21
    13cc:	08 95       	ret

000013ce <__fp_round>:
    13ce:	09 2e       	mov	r0, r25
    13d0:	03 94       	inc	r0
    13d2:	00 0c       	add	r0, r0
    13d4:	11 f4       	brne	.+4      	; 0x13da <__fp_round+0xc>
    13d6:	88 23       	and	r24, r24
    13d8:	52 f0       	brmi	.+20     	; 0x13ee <__fp_round+0x20>
    13da:	bb 0f       	add	r27, r27
    13dc:	40 f4       	brcc	.+16     	; 0x13ee <__fp_round+0x20>
    13de:	bf 2b       	or	r27, r31
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <__fp_round+0x18>
    13e2:	60 ff       	sbrs	r22, 0
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <__fp_round+0x20>
    13e6:	6f 5f       	subi	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	8f 4f       	sbci	r24, 0xFF	; 255
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <__fp_split3>:
    13f0:	57 fd       	sbrc	r21, 7
    13f2:	90 58       	subi	r25, 0x80	; 128
    13f4:	44 0f       	add	r20, r20
    13f6:	55 1f       	adc	r21, r21
    13f8:	59 f0       	breq	.+22     	; 0x1410 <__fp_splitA+0x10>
    13fa:	5f 3f       	cpi	r21, 0xFF	; 255
    13fc:	71 f0       	breq	.+28     	; 0x141a <__fp_splitA+0x1a>
    13fe:	47 95       	ror	r20

00001400 <__fp_splitA>:
    1400:	88 0f       	add	r24, r24
    1402:	97 fb       	bst	r25, 7
    1404:	99 1f       	adc	r25, r25
    1406:	61 f0       	breq	.+24     	; 0x1420 <__fp_splitA+0x20>
    1408:	9f 3f       	cpi	r25, 0xFF	; 255
    140a:	79 f0       	breq	.+30     	; 0x142a <__fp_splitA+0x2a>
    140c:	87 95       	ror	r24
    140e:	08 95       	ret
    1410:	12 16       	cp	r1, r18
    1412:	13 06       	cpc	r1, r19
    1414:	14 06       	cpc	r1, r20
    1416:	55 1f       	adc	r21, r21
    1418:	f2 cf       	rjmp	.-28     	; 0x13fe <__fp_split3+0xe>
    141a:	46 95       	lsr	r20
    141c:	f1 df       	rcall	.-30     	; 0x1400 <__fp_splitA>
    141e:	08 c0       	rjmp	.+16     	; 0x1430 <__fp_splitA+0x30>
    1420:	16 16       	cp	r1, r22
    1422:	17 06       	cpc	r1, r23
    1424:	18 06       	cpc	r1, r24
    1426:	99 1f       	adc	r25, r25
    1428:	f1 cf       	rjmp	.-30     	; 0x140c <__fp_splitA+0xc>
    142a:	86 95       	lsr	r24
    142c:	71 05       	cpc	r23, r1
    142e:	61 05       	cpc	r22, r1
    1430:	08 94       	sec
    1432:	08 95       	ret

00001434 <__fp_zero>:
    1434:	e8 94       	clt

00001436 <__fp_szero>:
    1436:	bb 27       	eor	r27, r27
    1438:	66 27       	eor	r22, r22
    143a:	77 27       	eor	r23, r23
    143c:	cb 01       	movw	r24, r22
    143e:	97 f9       	bld	r25, 7
    1440:	08 95       	ret

00001442 <__mulsf3>:
    1442:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3x>
    1446:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__fp_round>
    144a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__fp_pscA>
    144e:	38 f0       	brcs	.+14     	; 0x145e <__mulsf3+0x1c>
    1450:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_pscB>
    1454:	20 f0       	brcs	.+8      	; 0x145e <__mulsf3+0x1c>
    1456:	95 23       	and	r25, r21
    1458:	11 f0       	breq	.+4      	; 0x145e <__mulsf3+0x1c>
    145a:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_inf>
    145e:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_nan>
    1462:	11 24       	eor	r1, r1
    1464:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_szero>

00001468 <__mulsf3x>:
    1468:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_split3>
    146c:	70 f3       	brcs	.-36     	; 0x144a <__mulsf3+0x8>

0000146e <__mulsf3_pse>:
    146e:	95 9f       	mul	r25, r21
    1470:	c1 f3       	breq	.-16     	; 0x1462 <__mulsf3+0x20>
    1472:	95 0f       	add	r25, r21
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	55 1f       	adc	r21, r21
    1478:	62 9f       	mul	r22, r18
    147a:	f0 01       	movw	r30, r0
    147c:	72 9f       	mul	r23, r18
    147e:	bb 27       	eor	r27, r27
    1480:	f0 0d       	add	r31, r0
    1482:	b1 1d       	adc	r27, r1
    1484:	63 9f       	mul	r22, r19
    1486:	aa 27       	eor	r26, r26
    1488:	f0 0d       	add	r31, r0
    148a:	b1 1d       	adc	r27, r1
    148c:	aa 1f       	adc	r26, r26
    148e:	64 9f       	mul	r22, r20
    1490:	66 27       	eor	r22, r22
    1492:	b0 0d       	add	r27, r0
    1494:	a1 1d       	adc	r26, r1
    1496:	66 1f       	adc	r22, r22
    1498:	82 9f       	mul	r24, r18
    149a:	22 27       	eor	r18, r18
    149c:	b0 0d       	add	r27, r0
    149e:	a1 1d       	adc	r26, r1
    14a0:	62 1f       	adc	r22, r18
    14a2:	73 9f       	mul	r23, r19
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	62 1f       	adc	r22, r18
    14aa:	83 9f       	mul	r24, r19
    14ac:	a0 0d       	add	r26, r0
    14ae:	61 1d       	adc	r22, r1
    14b0:	22 1f       	adc	r18, r18
    14b2:	74 9f       	mul	r23, r20
    14b4:	33 27       	eor	r19, r19
    14b6:	a0 0d       	add	r26, r0
    14b8:	61 1d       	adc	r22, r1
    14ba:	23 1f       	adc	r18, r19
    14bc:	84 9f       	mul	r24, r20
    14be:	60 0d       	add	r22, r0
    14c0:	21 1d       	adc	r18, r1
    14c2:	82 2f       	mov	r24, r18
    14c4:	76 2f       	mov	r23, r22
    14c6:	6a 2f       	mov	r22, r26
    14c8:	11 24       	eor	r1, r1
    14ca:	9f 57       	subi	r25, 0x7F	; 127
    14cc:	50 40       	sbci	r21, 0x00	; 0
    14ce:	9a f0       	brmi	.+38     	; 0x14f6 <__mulsf3_pse+0x88>
    14d0:	f1 f0       	breq	.+60     	; 0x150e <__mulsf3_pse+0xa0>
    14d2:	88 23       	and	r24, r24
    14d4:	4a f0       	brmi	.+18     	; 0x14e8 <__mulsf3_pse+0x7a>
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	bb 1f       	adc	r27, r27
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	91 50       	subi	r25, 0x01	; 1
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	a9 f7       	brne	.-22     	; 0x14d2 <__mulsf3_pse+0x64>
    14e8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ea:	51 05       	cpc	r21, r1
    14ec:	80 f0       	brcs	.+32     	; 0x150e <__mulsf3_pse+0xa0>
    14ee:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_inf>
    14f2:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_szero>
    14f6:	5f 3f       	cpi	r21, 0xFF	; 255
    14f8:	e4 f3       	brlt	.-8      	; 0x14f2 <__mulsf3_pse+0x84>
    14fa:	98 3e       	cpi	r25, 0xE8	; 232
    14fc:	d4 f3       	brlt	.-12     	; 0x14f2 <__mulsf3_pse+0x84>
    14fe:	86 95       	lsr	r24
    1500:	77 95       	ror	r23
    1502:	67 95       	ror	r22
    1504:	b7 95       	ror	r27
    1506:	f7 95       	ror	r31
    1508:	e7 95       	ror	r30
    150a:	9f 5f       	subi	r25, 0xFF	; 255
    150c:	c1 f7       	brne	.-16     	; 0x14fe <__mulsf3_pse+0x90>
    150e:	fe 2b       	or	r31, r30
    1510:	88 0f       	add	r24, r24
    1512:	91 1d       	adc	r25, r1
    1514:	96 95       	lsr	r25
    1516:	87 95       	ror	r24
    1518:	97 f9       	bld	r25, 7
    151a:	08 95       	ret

0000151c <__mulsi3>:
    151c:	db 01       	movw	r26, r22
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__muluhisi3>
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	a2 9f       	mul	r26, r18
    152c:	80 0d       	add	r24, r0
    152e:	91 1d       	adc	r25, r1
    1530:	a3 9f       	mul	r26, r19
    1532:	90 0d       	add	r25, r0
    1534:	b2 9f       	mul	r27, r18
    1536:	90 0d       	add	r25, r0
    1538:	11 24       	eor	r1, r1
    153a:	08 95       	ret

0000153c <__tablejump2__>:
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	05 90       	lpm	r0, Z+
    1542:	f4 91       	lpm	r31, Z
    1544:	e0 2d       	mov	r30, r0
    1546:	09 94       	ijmp

00001548 <__muluhisi3>:
    1548:	0e 94 af 0a 	call	0x155e	; 0x155e <__umulhisi3>
    154c:	a5 9f       	mul	r26, r21
    154e:	90 0d       	add	r25, r0
    1550:	b4 9f       	mul	r27, r20
    1552:	90 0d       	add	r25, r0
    1554:	a4 9f       	mul	r26, r20
    1556:	80 0d       	add	r24, r0
    1558:	91 1d       	adc	r25, r1
    155a:	11 24       	eor	r1, r1
    155c:	08 95       	ret

0000155e <__umulhisi3>:
    155e:	a2 9f       	mul	r26, r18
    1560:	b0 01       	movw	r22, r0
    1562:	b3 9f       	mul	r27, r19
    1564:	c0 01       	movw	r24, r0
    1566:	a3 9f       	mul	r26, r19
    1568:	70 0d       	add	r23, r0
    156a:	81 1d       	adc	r24, r1
    156c:	11 24       	eor	r1, r1
    156e:	91 1d       	adc	r25, r1
    1570:	b2 9f       	mul	r27, r18
    1572:	70 0d       	add	r23, r0
    1574:	81 1d       	adc	r24, r1
    1576:	11 24       	eor	r1, r1
    1578:	91 1d       	adc	r25, r1
    157a:	08 95       	ret

0000157c <__itoa_ncheck>:
    157c:	bb 27       	eor	r27, r27
    157e:	4a 30       	cpi	r20, 0x0A	; 10
    1580:	31 f4       	brne	.+12     	; 0x158e <__itoa_ncheck+0x12>
    1582:	99 23       	and	r25, r25
    1584:	22 f4       	brpl	.+8      	; 0x158e <__itoa_ncheck+0x12>
    1586:	bd e2       	ldi	r27, 0x2D	; 45
    1588:	90 95       	com	r25
    158a:	81 95       	neg	r24
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__utoa_common>

00001592 <__utoa_ncheck>:
    1592:	bb 27       	eor	r27, r27

00001594 <__utoa_common>:
    1594:	fb 01       	movw	r30, r22
    1596:	55 27       	eor	r21, r21
    1598:	aa 27       	eor	r26, r26
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	aa 1f       	adc	r26, r26
    15a0:	a4 17       	cp	r26, r20
    15a2:	10 f0       	brcs	.+4      	; 0x15a8 <__utoa_common+0x14>
    15a4:	a4 1b       	sub	r26, r20
    15a6:	83 95       	inc	r24
    15a8:	50 51       	subi	r21, 0x10	; 16
    15aa:	b9 f7       	brne	.-18     	; 0x159a <__utoa_common+0x6>
    15ac:	a0 5d       	subi	r26, 0xD0	; 208
    15ae:	aa 33       	cpi	r26, 0x3A	; 58
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <__utoa_common+0x20>
    15b2:	a9 5d       	subi	r26, 0xD9	; 217
    15b4:	a1 93       	st	Z+, r26
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	79 f7       	brne	.-34     	; 0x1598 <__utoa_common+0x4>
    15ba:	b1 11       	cpse	r27, r1
    15bc:	b1 93       	st	Z+, r27
    15be:	11 92       	st	Z+, r1
    15c0:	cb 01       	movw	r24, r22
    15c2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <strrev>

000015c6 <strrev>:
    15c6:	dc 01       	movw	r26, r24
    15c8:	fc 01       	movw	r30, r24
    15ca:	67 2f       	mov	r22, r23
    15cc:	71 91       	ld	r23, Z+
    15ce:	77 23       	and	r23, r23
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <strrev+0x4>
    15d2:	32 97       	sbiw	r30, 0x02	; 2
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <strrev+0x18>
    15d6:	7c 91       	ld	r23, X
    15d8:	6d 93       	st	X+, r22
    15da:	70 83       	st	Z, r23
    15dc:	62 91       	ld	r22, -Z
    15de:	ae 17       	cp	r26, r30
    15e0:	bf 07       	cpc	r27, r31
    15e2:	c8 f3       	brcs	.-14     	; 0x15d6 <strrev+0x10>
    15e4:	08 95       	ret

000015e6 <_exit>:
    15e6:	f8 94       	cli

000015e8 <__stop_program>:
    15e8:	ff cf       	rjmp	.-2      	; 0x15e8 <__stop_program>
